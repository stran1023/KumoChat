{"ast":null,"code":"import forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\n\n// Sinh AES key ngẫu nhiên\nfunction generateAESKey() {\n  return CryptoJS.lib.WordArray.random(32).toString(); // 256-bit\n}\n\n// Mã hóa nội dung bằng AES key\nfunction encryptAES(content, aesKey) {\n  return CryptoJS.AES.encrypt(content, aesKey).toString();\n}\n\n// Mã hóa AES key bằng publicKey người nhận (RSA)\nexport function encryptAESKeyWithPublicKey(aesKey, publicKeyPem) {\n  const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\n  const encrypted = publicKey.encrypt(aesKey, \"RSA-OAEP\");\n  return forge.util.encode64(encrypted);\n}\nexport function encryptMessage(content, recipientPublicKeyPem) {\n  const aesKey = generateAESKey();\n  const encryptedContent = encryptAES(content, aesKey);\n  const encryptedAESKey = encryptAESKeyWithPublicKey(aesKey, recipientPublicKeyPem);\n  return {\n    encryptedContent,\n    encryptedAESKey\n  };\n}","map":{"version":3,"names":["forge","CryptoJS","generateAESKey","lib","WordArray","random","toString","encryptAES","content","aesKey","AES","encrypt","encryptAESKeyWithPublicKey","publicKeyPem","publicKey","pki","publicKeyFromPem","encrypted","util","encode64","encryptMessage","recipientPublicKeyPem","encryptedContent","encryptedAESKey"],"sources":["D:/Chuyen nganh/Đồ án ATTT/KumoChat/frontend/src/utils/encryption.js"],"sourcesContent":["import forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\n// Sinh AES key ngẫu nhiên\r\nfunction generateAESKey() {\r\n  return CryptoJS.lib.WordArray.random(32).toString(); // 256-bit\r\n}\r\n\r\n// Mã hóa nội dung bằng AES key\r\nfunction encryptAES(content, aesKey) {\r\n  return CryptoJS.AES.encrypt(content, aesKey).toString();\r\n}\r\n\r\n// Mã hóa AES key bằng publicKey người nhận (RSA)\r\nexport function encryptAESKeyWithPublicKey(aesKey, publicKeyPem) {\r\n  const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\r\n  const encrypted = publicKey.encrypt(aesKey, \"RSA-OAEP\");\r\n  return forge.util.encode64(encrypted);\r\n}\r\n\r\nexport function encryptMessage(content, recipientPublicKeyPem) {\r\n  const aesKey = generateAESKey();\r\n  const encryptedContent = encryptAES(content, aesKey);\r\n  const encryptedAESKey = encryptAESKeyWithPublicKey(aesKey, recipientPublicKeyPem);\r\n\r\n  return { encryptedContent, encryptedAESKey };\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACA,SAASC,cAAcA,CAAA,EAAG;EACxB,OAAOD,QAAQ,CAACE,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvD;;AAEA;AACA,SAASC,UAAUA,CAACC,OAAO,EAAEC,MAAM,EAAE;EACnC,OAAOR,QAAQ,CAACS,GAAG,CAACC,OAAO,CAACH,OAAO,EAAEC,MAAM,CAAC,CAACH,QAAQ,CAAC,CAAC;AACzD;;AAEA;AACA,OAAO,SAASM,0BAA0BA,CAACH,MAAM,EAAEI,YAAY,EAAE;EAC/D,MAAMC,SAAS,GAAGd,KAAK,CAACe,GAAG,CAACC,gBAAgB,CAACH,YAAY,CAAC;EAC1D,MAAMI,SAAS,GAAGH,SAAS,CAACH,OAAO,CAACF,MAAM,EAAE,UAAU,CAAC;EACvD,OAAOT,KAAK,CAACkB,IAAI,CAACC,QAAQ,CAACF,SAAS,CAAC;AACvC;AAEA,OAAO,SAASG,cAAcA,CAACZ,OAAO,EAAEa,qBAAqB,EAAE;EAC7D,MAAMZ,MAAM,GAAGP,cAAc,CAAC,CAAC;EAC/B,MAAMoB,gBAAgB,GAAGf,UAAU,CAACC,OAAO,EAAEC,MAAM,CAAC;EACpD,MAAMc,eAAe,GAAGX,0BAA0B,CAACH,MAAM,EAAEY,qBAAqB,CAAC;EAEjF,OAAO;IAAEC,gBAAgB;IAAEC;EAAgB,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}