{"ast":null,"code":"import forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\n\n// Sinh AES key ngẫu nhiên\n// function generateAESKey() {\n//   return CryptoJS.lib.WordArray.random(32).toString(); // 256-bit\n// }\n\n// Mã hóa nội dung bằng AES key\n// function encryptAES(content, aesKey) {\n//   return CryptoJS.AES.encrypt(content, aesKey).toString();\n// }\n\n// Mã hóa AES key bằng publicKey người nhận (RSA)\nexport function encryptAESKeyWithPublicKey(aesKey, publicKeyPem) {\n  const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\n  const encrypted = publicKey.encrypt(aesKey, \"RSA-OAEP\");\n  return forge.util.encode64(encrypted);\n}\nexport function encryptMessage(content, recipientPublicKeyPem, returnRawKey = false) {\n  const aesKeyRaw = CryptoJS.lib.WordArray.random(32).toString(); // 256-bit\n  const encryptedContent = CryptoJS.AES.encrypt(content, aesKeyRaw).toString();\n  const publicKey = forge.pki.publicKeyFromPem(recipientPublicKeyPem);\n  const encryptedAESKey = forge.util.encode64(publicKey.encrypt(aesKeyRaw, \"RSA-OAEP\"));\n  if (returnRawKey) {\n    return {\n      encryptedContent,\n      encryptedAESKey,\n      aesKeyRaw\n    };\n  }\n  return {\n    encryptedContent,\n    encryptedAESKey\n  };\n}\n\n// Dùng khi gửi tin nhắn nhóm bằng AES key đã giải mã\nexport function encryptGroupMessage(plainText, aesKeyRaw) {\n  const iv = forge.random.getBytesSync(16);\n  const cipher = forge.cipher.createCipher(\"AES-CBC\", aesKeyRaw);\n  cipher.start({\n    iv\n  });\n  cipher.update(forge.util.createBuffer(plainText, \"utf8\"));\n  cipher.finish();\n  const encrypted = forge.util.encode64(iv + cipher.output.getBytes());\n  return {\n    encryptedContent: encrypted\n  };\n}","map":{"version":3,"names":["forge","CryptoJS","encryptAESKeyWithPublicKey","aesKey","publicKeyPem","publicKey","pki","publicKeyFromPem","encrypted","encrypt","util","encode64","encryptMessage","content","recipientPublicKeyPem","returnRawKey","aesKeyRaw","lib","WordArray","random","toString","encryptedContent","AES","encryptedAESKey","encryptGroupMessage","plainText","iv","getBytesSync","cipher","createCipher","start","update","createBuffer","finish","output","getBytes"],"sources":["D:/Chuyen nganh/Đồ án ATTT/KumoChat/frontend/src/utils/encryption.js"],"sourcesContent":["import forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\n// Sinh AES key ngẫu nhiên\r\n// function generateAESKey() {\r\n//   return CryptoJS.lib.WordArray.random(32).toString(); // 256-bit\r\n// }\r\n\r\n// Mã hóa nội dung bằng AES key\r\n// function encryptAES(content, aesKey) {\r\n//   return CryptoJS.AES.encrypt(content, aesKey).toString();\r\n// }\r\n\r\n// Mã hóa AES key bằng publicKey người nhận (RSA)\r\nexport function encryptAESKeyWithPublicKey(aesKey, publicKeyPem) {\r\n  const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\r\n  const encrypted = publicKey.encrypt(aesKey, \"RSA-OAEP\");\r\n  return forge.util.encode64(encrypted);\r\n}\r\n\r\nexport function encryptMessage(content, recipientPublicKeyPem, returnRawKey = false) {\r\n  const aesKeyRaw = CryptoJS.lib.WordArray.random(32).toString(); // 256-bit\r\n  const encryptedContent = CryptoJS.AES.encrypt(content, aesKeyRaw).toString();\r\n  const publicKey = forge.pki.publicKeyFromPem(recipientPublicKeyPem);\r\n  const encryptedAESKey = forge.util.encode64(publicKey.encrypt(aesKeyRaw, \"RSA-OAEP\"));\r\n\r\n  if (returnRawKey) {\r\n    return { encryptedContent, encryptedAESKey, aesKeyRaw };\r\n  }\r\n\r\n  return { encryptedContent, encryptedAESKey };\r\n}\r\n\r\n// Dùng khi gửi tin nhắn nhóm bằng AES key đã giải mã\r\nexport function encryptGroupMessage(plainText, aesKeyRaw) {\r\n  const iv = forge.random.getBytesSync(16);\r\n  const cipher = forge.cipher.createCipher(\"AES-CBC\", aesKeyRaw);\r\n  cipher.start({ iv });\r\n  cipher.update(forge.util.createBuffer(plainText, \"utf8\"));\r\n  cipher.finish();\r\n\r\n  const encrypted = forge.util.encode64(iv + cipher.output.getBytes());\r\n  return { encryptedContent: encrypted };\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO,SAASC,0BAA0BA,CAACC,MAAM,EAAEC,YAAY,EAAE;EAC/D,MAAMC,SAAS,GAAGL,KAAK,CAACM,GAAG,CAACC,gBAAgB,CAACH,YAAY,CAAC;EAC1D,MAAMI,SAAS,GAAGH,SAAS,CAACI,OAAO,CAACN,MAAM,EAAE,UAAU,CAAC;EACvD,OAAOH,KAAK,CAACU,IAAI,CAACC,QAAQ,CAACH,SAAS,CAAC;AACvC;AAEA,OAAO,SAASI,cAAcA,CAACC,OAAO,EAAEC,qBAAqB,EAAEC,YAAY,GAAG,KAAK,EAAE;EACnF,MAAMC,SAAS,GAAGf,QAAQ,CAACgB,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChE,MAAMC,gBAAgB,GAAGpB,QAAQ,CAACqB,GAAG,CAACb,OAAO,CAACI,OAAO,EAAEG,SAAS,CAAC,CAACI,QAAQ,CAAC,CAAC;EAC5E,MAAMf,SAAS,GAAGL,KAAK,CAACM,GAAG,CAACC,gBAAgB,CAACO,qBAAqB,CAAC;EACnE,MAAMS,eAAe,GAAGvB,KAAK,CAACU,IAAI,CAACC,QAAQ,CAACN,SAAS,CAACI,OAAO,CAACO,SAAS,EAAE,UAAU,CAAC,CAAC;EAErF,IAAID,YAAY,EAAE;IAChB,OAAO;MAAEM,gBAAgB;MAAEE,eAAe;MAAEP;IAAU,CAAC;EACzD;EAEA,OAAO;IAAEK,gBAAgB;IAAEE;EAAgB,CAAC;AAC9C;;AAEA;AACA,OAAO,SAASC,mBAAmBA,CAACC,SAAS,EAAET,SAAS,EAAE;EACxD,MAAMU,EAAE,GAAG1B,KAAK,CAACmB,MAAM,CAACQ,YAAY,CAAC,EAAE,CAAC;EACxC,MAAMC,MAAM,GAAG5B,KAAK,CAAC4B,MAAM,CAACC,YAAY,CAAC,SAAS,EAAEb,SAAS,CAAC;EAC9DY,MAAM,CAACE,KAAK,CAAC;IAAEJ;EAAG,CAAC,CAAC;EACpBE,MAAM,CAACG,MAAM,CAAC/B,KAAK,CAACU,IAAI,CAACsB,YAAY,CAACP,SAAS,EAAE,MAAM,CAAC,CAAC;EACzDG,MAAM,CAACK,MAAM,CAAC,CAAC;EAEf,MAAMzB,SAAS,GAAGR,KAAK,CAACU,IAAI,CAACC,QAAQ,CAACe,EAAE,GAAGE,MAAM,CAACM,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;EACpE,OAAO;IAAEd,gBAAgB,EAAEb;EAAU,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}