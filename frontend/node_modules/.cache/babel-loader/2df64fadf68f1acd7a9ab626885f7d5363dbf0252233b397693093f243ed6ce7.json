{"ast":null,"code":"import forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\n\n// Giải mã RSA (dùng private key PEM + password)\nexport function decryptPrivateKey(encryptedPrivateKeyPem, password) {\n  try {\n    return forge.pki.decryptRsaPrivateKey(encryptedPrivateKeyPem, password);\n  } catch (err) {\n    console.error(\"❌ Sai mật khẩu hoặc private key lỗi\");\n    return null;\n  }\n}\n\n// Giải mã AES key đã được RSA mã hóa\nexport function decryptAESKey(encryptedAESKeyBase64, privateKey) {\n  const encryptedBytes = forge.util.decode64(encryptedAESKeyBase64);\n  const aesKey = privateKey.decrypt(encryptedBytes, \"RSA-OAEP\");\n  return aesKey;\n}\n\n// Giải mã nội dung bằng AES key\nexport function decryptContentAES(encryptedContent, aesKey) {\n  const bytes = CryptoJS.AES.decrypt(encryptedContent, aesKey);\n  return bytes.toString(CryptoJS.enc.Utf8);\n}","map":{"version":3,"names":["forge","CryptoJS","decryptPrivateKey","encryptedPrivateKeyPem","password","pki","decryptRsaPrivateKey","err","console","error","decryptAESKey","encryptedAESKeyBase64","privateKey","encryptedBytes","util","decode64","aesKey","decrypt","decryptContentAES","encryptedContent","bytes","AES","toString","enc","Utf8"],"sources":["D:/Chuyen nganh/Đồ án ATTT/KumoChat/frontend/src/utils/decryption.js"],"sourcesContent":["import forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\n// Giải mã RSA (dùng private key PEM + password)\r\nexport function decryptPrivateKey(encryptedPrivateKeyPem, password) {\r\n  try {\r\n    return forge.pki.decryptRsaPrivateKey(encryptedPrivateKeyPem, password);\r\n  } catch (err) {\r\n    console.error(\"❌ Sai mật khẩu hoặc private key lỗi\");\r\n    return null;\r\n  }\r\n}\r\n\r\n// Giải mã AES key đã được RSA mã hóa\r\nexport function decryptAESKey(encryptedAESKeyBase64, privateKey) {\r\n  const encryptedBytes = forge.util.decode64(encryptedAESKeyBase64);\r\n  const aesKey = privateKey.decrypt(encryptedBytes, \"RSA-OAEP\");\r\n  return aesKey;\r\n}\r\n\r\n// Giải mã nội dung bằng AES key\r\nexport function decryptContentAES(encryptedContent, aesKey) {\r\n  const bytes = CryptoJS.AES.decrypt(encryptedContent, aesKey);\r\n  return bytes.toString(CryptoJS.enc.Utf8);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACA,OAAO,SAASC,iBAAiBA,CAACC,sBAAsB,EAAEC,QAAQ,EAAE;EAClE,IAAI;IACF,OAAOJ,KAAK,CAACK,GAAG,CAACC,oBAAoB,CAACH,sBAAsB,EAAEC,QAAQ,CAAC;EACzE,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASC,aAAaA,CAACC,qBAAqB,EAAEC,UAAU,EAAE;EAC/D,MAAMC,cAAc,GAAGb,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACJ,qBAAqB,CAAC;EACjE,MAAMK,MAAM,GAAGJ,UAAU,CAACK,OAAO,CAACJ,cAAc,EAAE,UAAU,CAAC;EAC7D,OAAOG,MAAM;AACf;;AAEA;AACA,OAAO,SAASE,iBAAiBA,CAACC,gBAAgB,EAAEH,MAAM,EAAE;EAC1D,MAAMI,KAAK,GAAGnB,QAAQ,CAACoB,GAAG,CAACJ,OAAO,CAACE,gBAAgB,EAAEH,MAAM,CAAC;EAC5D,OAAOI,KAAK,CAACE,QAAQ,CAACrB,QAAQ,CAACsB,GAAG,CAACC,IAAI,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}