{"ast":null,"code":"var _jsxFileName = \"D:\\\\Chuyen nganh\\\\\\u0110\\u1ED3 \\xE1n ATTT\\\\KumoChat\\\\frontend\\\\src\\\\components\\\\chat\\\\BroadcastChat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { Box, Typography, List, ListItem, ListItemText, TextField, Button } from \"@mui/material\";\nimport { SocketContext } from \"../../context/SocketContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BroadcastChat() {\n  _s();\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    socket\n  } = useContext(SocketContext);\n  const [messages, setMessages] = useState([]);\n  const [privateKey, setPrivateKey] = useState(null);\n  const [password, setPassword] = useState(\"\");\n  const handleLoadPrivateKey = async () => {\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/keys/my`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const decrypted = decryptPrivateKey(res.data.encryptedPrivateKey, password);\n    if (!decrypted) {\n      alert(\"❌ Sai mật khẩu hoặc khóa không hợp lệ\");\n    } else {\n      setPrivateKey(forge.pki.privateKeyFromPem(decrypted));\n      alert(\"🔓 Đã giải mã private key thành công!\");\n    }\n  };\n\n  // 🟡 Hàm giải mã và thêm tin nhắn\n  const decryptAndAddMessage = msg => {\n    try {\n      const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\n      console.log(aesKeyBytes);\n      const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\n      const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\n      setMessages(prev => {\n        var _msg$sender;\n        return [{\n          ...msg,\n          senderName: ((_msg$sender = msg.sender) === null || _msg$sender === void 0 ? void 0 : _msg$sender.username) || \"admin\",\n          decryptedContent: plaintext || \"(Không thể giải mã)\"\n        }, ...prev];\n      });\n    } catch (err) {\n      setMessages(prev => {\n        var _msg$sender2;\n        return [{\n          ...msg,\n          senderName: ((_msg$sender2 = msg.sender) === null || _msg$sender2 === void 0 ? void 0 : _msg$sender2.username) || \"Không rõ\",\n          decryptedContent: \"(Lỗi giải mã)\"\n        }, ...prev];\n      });\n    }\n  };\n\n  // 🟢 Fetch tin nhắn ban đầu\n  useEffect(() => {\n    const fetchBroadcasts = async () => {\n      if (!privateKey) return;\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      res.data.forEach(decryptAndAddMessage);\n    };\n    fetchBroadcasts();\n  }, [token, privateKey]);\n\n  // 🔵 Lắng nghe realtime socket\n  useEffect(() => {\n    if (!socket || !privateKey) return;\n    const handler = msg => decryptAndAddMessage(msg);\n    socket.on(\"broadcast_message\", handler);\n    return () => socket.off(\"broadcast_message\", handler);\n  }, [socket, privateKey]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      children: \"\\uD83D\\uDCE2 Tin nh\\u1EAFn broadcast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), !privateKey && /*#__PURE__*/_jsxDEV(Box, {\n      mb: 2,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: \"\\uD83D\\uDD10 Nh\\u1EADp m\\u1EADt kh\\u1EA9u \\u0111\\u1EC3 gi\\u1EA3i RSA key:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        gap: 1,\n        mt: 1,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          type: \"password\",\n          size: \"small\",\n          placeholder: \"M\\u1EADt kh\\u1EA9u\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: handleLoadPrivateKey,\n          children: \"Gi\\u1EA3i m\\xE3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        maxHeight: 300,\n        overflow: \"auto\",\n        bgcolor: \"#f4f4f4\",\n        mt: 2\n      },\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: `Từ: ${msg.senderName}`,\n          secondary: msg.decryptedContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n// 🔐 Hàm giải mã private key đã mã hóa bằng mật khẩu\n_s(BroadcastChat, \"CizAZh8p/CieElJczm23xxZKN7w=\");\n_c = BroadcastChat;\nfunction decryptPrivateKey(encryptedPem, passphrase) {\n  try {\n    const privateKey = forge.pki.decryptRsaPrivateKey(encryptedPem, passphrase);\n    return privateKey ? forge.pki.privateKeyToPem(privateKey) : null;\n  } catch {\n    return null;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"BroadcastChat\");","map":{"version":3,"names":["useEffect","useState","useContext","axios","forge","CryptoJS","AuthContext","Box","Typography","List","ListItem","ListItemText","TextField","Button","SocketContext","jsxDEV","_jsxDEV","BroadcastChat","_s","token","socket","messages","setMessages","privateKey","setPrivateKey","password","setPassword","handleLoadPrivateKey","res","get","process","env","REACT_APP_API_URL","headers","Authorization","decrypted","decryptPrivateKey","data","encryptedPrivateKey","alert","pki","privateKeyFromPem","decryptAndAddMessage","msg","aesKeyBytes","decrypt","util","decode64","encryptedAESKey","console","log","AES","encryptedContent","plaintext","toString","enc","Utf8","prev","_msg$sender","senderName","sender","username","decryptedContent","err","_msg$sender2","fetchBroadcasts","forEach","handler","on","off","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","mb","display","gap","mt","type","size","placeholder","value","onChange","e","target","onClick","dense","sx","maxHeight","overflow","bgcolor","map","primary","secondary","id","_c","encryptedPem","passphrase","decryptRsaPrivateKey","privateKeyToPem","$RefreshReg$"],"sources":["D:/Chuyen nganh/Đồ án ATTT/KumoChat/frontend/src/components/chat/BroadcastChat.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { Box, Typography, List, ListItem, ListItemText, TextField, Button } from \"@mui/material\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\n\r\nexport default function BroadcastChat() {\r\n  const { token } = useContext(AuthContext);\r\n  const { socket } = useContext(SocketContext);\r\n  const [messages, setMessages] = useState([]);\r\n  const [privateKey, setPrivateKey] = useState(null);\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLoadPrivateKey = async () => {\r\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/keys/my`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n\r\n    const decrypted = decryptPrivateKey(res.data.encryptedPrivateKey, password);\r\n    if (!decrypted) {\r\n      alert(\"❌ Sai mật khẩu hoặc khóa không hợp lệ\");\r\n    } else {\r\n      setPrivateKey(forge.pki.privateKeyFromPem(decrypted));\r\n      alert(\"🔓 Đã giải mã private key thành công!\");\r\n    }\r\n  };\r\n\r\n  // 🟡 Hàm giải mã và thêm tin nhắn\r\n  const decryptAndAddMessage = (msg) => {\r\n    try {\r\n      const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\r\n      console.log(aesKeyBytes)\r\n      const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\r\n      const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\r\n\r\n      setMessages(prev => [{\r\n        ...msg,\r\n        senderName: msg.sender?.username || \"admin\",\r\n        decryptedContent: plaintext || \"(Không thể giải mã)\"\r\n      }, ...prev]);\r\n    } catch (err) {\r\n      setMessages(prev => [{\r\n        ...msg,\r\n        senderName: msg.sender?.username || \"Không rõ\",\r\n        decryptedContent: \"(Lỗi giải mã)\"\r\n      }, ...prev]);\r\n    }\r\n  };\r\n\r\n  // 🟢 Fetch tin nhắn ban đầu\r\n  useEffect(() => {\r\n    const fetchBroadcasts = async () => {\r\n      if (!privateKey) return;\r\n\r\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      res.data.forEach(decryptAndAddMessage);\r\n    };\r\n\r\n    fetchBroadcasts();\r\n  }, [token, privateKey]);\r\n\r\n  // 🔵 Lắng nghe realtime socket\r\n  useEffect(() => {\r\n    if (!socket || !privateKey) return;\r\n\r\n    const handler = (msg) => decryptAndAddMessage(msg);\r\n\r\n    socket.on(\"broadcast_message\", handler);\r\n    return () => socket.off(\"broadcast_message\", handler);\r\n  }, [socket, privateKey]);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"subtitle1\">📢 Tin nhắn broadcast</Typography>\r\n\r\n      {!privateKey && (\r\n        <Box mb={2}>\r\n          <Typography variant=\"body2\">🔐 Nhập mật khẩu để giải RSA key:</Typography>\r\n          <Box display=\"flex\" gap={1} mt={1}>\r\n            <TextField\r\n              type=\"password\"\r\n              size=\"small\"\r\n              placeholder=\"Mật khẩu\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <Button variant=\"outlined\" onClick={handleLoadPrivateKey}>\r\n              Giải mã\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n\r\n      <List dense sx={{ maxHeight: 300, overflow: \"auto\", bgcolor: \"#f4f4f4\", mt: 2 }}>\r\n        {messages.map(msg => (\r\n          <ListItem key={msg.id}>\r\n            <ListItemText\r\n              primary={`Từ: ${msg.senderName}`}\r\n              secondary={msg.decryptedContent}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n}\r\n\r\n// 🔐 Hàm giải mã private key đã mã hóa bằng mật khẩu\r\nfunction decryptPrivateKey(encryptedPem, passphrase) {\r\n  try {\r\n    const privateKey = forge.pki.decryptRsaPrivateKey(encryptedPem, passphrase);\r\n    return privateKey ? forge.pki.privateKeyToPem(privateKey) : null;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}