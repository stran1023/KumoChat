{"ast":null,"code":"var _jsxFileName = \"D:\\\\Chuyen nganh\\\\\\u0110\\u1ED3 \\xE1n ATTT\\\\KumoChat\\\\frontend\\\\src\\\\components\\\\chat\\\\BroadcastChat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { Box, Typography, List, ListItem, ListItemText, TextField, Button } from \"@mui/material\";\nimport { encryptMessage } from \"../../utils/encryption\";\nimport { decryptPrivateKey } from \"../../utils/decryption\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BroadcastChat() {\n  _s();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  const [broadcastInput, setBroadcastInput] = useState(\"\");\n\n  // Gửi broadcast\n  const sendBroadcast = async message => {\n    const adminUser = JSON.parse(localStorage.getItem(\"user\"));\n    const resUsers = await axios.get(`${process.env.REACT_APP_API_URL}/admin/users`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const allUsers = resUsers.data.filter(u => u.id !== adminUser.id);\n    const encryptedAESKeys = [];\n    let encryptedContent;\n    for (const user of allUsers) {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/admin/users/${user.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const publicKeyPem = res.data.publicKey;\n      const {\n        encryptedContent: encContent,\n        encryptedAESKey\n      } = encryptMessage(message, publicKeyPem);\n      if (!encryptedContent) encryptedContent = encContent;\n      encryptedAESKeys.push({\n        userId: user.id,\n        key: encryptedAESKey\n      });\n    }\n    await axios.post(`${process.env.REACT_APP_API_URL}/admin/broadcast`, {\n      encryptedContent,\n      encryptedAESKeys,\n      plaintext: message\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    alert(\"✅ Tin nhắn broadcast đã gửi đến tất cả người dùng!\");\n  };\n  const handleSend = async () => {\n    if (!broadcastInput.trim()) return;\n    await sendBroadcast(broadcastInput);\n    setBroadcastInput(\"\");\n  };\n\n  // Load tin nhắn broadcast\n  useEffect(() => {\n    const fetchBroadcasts = async () => {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      const passphrase = prompt(\"🔐 Nhập mật khẩu để giải mã tin nhắn:\");\n      const privateKeyPem = decryptPrivateKey(user.encryptedPrivateKey, passphrase);\n      if (!privateKeyPem) return;\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\n      const decryptedMsgs = res.data.map(msg => {\n        try {\n          var _msg$sender;\n          const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\n          const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\n          const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\n          return {\n            ...msg,\n            senderName: ((_msg$sender = msg.sender) === null || _msg$sender === void 0 ? void 0 : _msg$sender.username) || \"admin\",\n            decryptedContent: plaintext || \"(Không thể giải mã)\"\n          };\n        } catch {\n          var _msg$sender2;\n          return {\n            ...msg,\n            senderName: ((_msg$sender2 = msg.sender) === null || _msg$sender2 === void 0 ? void 0 : _msg$sender2.username) || \"Không rõ\",\n            decryptedContent: \"(Lỗi giải mã)\"\n          };\n        }\n      });\n      setMessages(decryptedMsgs);\n    };\n    fetchBroadcasts();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      children: \"\\uD83D\\uDCE2 Tin nh\\u1EAFn broadcast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        maxHeight: 300,\n        overflow: \"auto\",\n        bgcolor: \"#f4f4f4\",\n        mt: 2\n      },\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: `Từ: ${msg.senderName}`,\n          secondary: msg.decryptedContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"So\\u1EA1n tin broadcast\",\n        value: broadcastInput,\n        onChange: e => setBroadcastInput(e.target.value),\n        multiline: true,\n        rows: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(BroadcastChat, \"A3rReHUqyfLXFEe6XfPgPbmuggo=\");\n_c = BroadcastChat;\nvar _c;\n$RefreshReg$(_c, \"BroadcastChat\");","map":{"version":3,"names":["useEffect","useState","useContext","axios","forge","CryptoJS","AuthContext","Box","Typography","List","ListItem","ListItemText","TextField","Button","encryptMessage","decryptPrivateKey","jsxDEV","_jsxDEV","BroadcastChat","_s","token","messages","setMessages","broadcastInput","setBroadcastInput","sendBroadcast","message","adminUser","JSON","parse","localStorage","getItem","resUsers","get","process","env","REACT_APP_API_URL","headers","Authorization","allUsers","data","filter","u","id","encryptedAESKeys","encryptedContent","user","res","publicKeyPem","publicKey","encContent","encryptedAESKey","push","userId","key","post","plaintext","alert","handleSend","trim","fetchBroadcasts","passphrase","prompt","privateKeyPem","encryptedPrivateKey","privateKey","pki","privateKeyFromPem","decryptedMsgs","map","msg","_msg$sender","aesKeyBytes","decrypt","util","decode64","decrypted","AES","toString","enc","Utf8","senderName","sender","username","decryptedContent","_msg$sender2","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","dense","sx","maxHeight","overflow","bgcolor","mt","primary","secondary","fullWidth","label","value","onChange","e","target","multiline","rows","_c","$RefreshReg$"],"sources":["D:/Chuyen nganh/Đồ án ATTT/KumoChat/frontend/src/components/chat/BroadcastChat.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { Box, Typography, List, ListItem, ListItemText, TextField, Button } from \"@mui/material\";\r\nimport { encryptMessage } from \"../../utils/encryption\";\r\nimport { decryptPrivateKey } from \"../../utils/decryption\";\r\n\r\nexport default function BroadcastChat() {\r\n  const { token } = useContext(AuthContext);\r\n  const [messages, setMessages] = useState([]);\r\n  const [broadcastInput, setBroadcastInput] = useState(\"\");\r\n\r\n  // Gửi broadcast\r\n  const sendBroadcast = async (message) => {\r\n    const adminUser = JSON.parse(localStorage.getItem(\"user\"));\r\n    const resUsers = await axios.get(`${process.env.REACT_APP_API_URL}/admin/users`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n\r\n    const allUsers = resUsers.data.filter(u => u.id !== adminUser.id);\r\n    const encryptedAESKeys = [];\r\n    let encryptedContent;\r\n\r\n    for (const user of allUsers) {\r\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/admin/users/${user.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      const publicKeyPem = res.data.publicKey;\r\n      const { encryptedContent: encContent, encryptedAESKey } = encryptMessage(message, publicKeyPem);\r\n      if (!encryptedContent) encryptedContent = encContent;\r\n\r\n      encryptedAESKeys.push({ userId: user.id, key: encryptedAESKey });\r\n    }\r\n\r\n    await axios.post(`${process.env.REACT_APP_API_URL}/admin/broadcast`, {\r\n      encryptedContent,\r\n      encryptedAESKeys,\r\n      plaintext: message\r\n    }, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n\r\n    alert(\"✅ Tin nhắn broadcast đã gửi đến tất cả người dùng!\");\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!broadcastInput.trim()) return;\r\n    await sendBroadcast(broadcastInput);\r\n    setBroadcastInput(\"\");\r\n  };\r\n\r\n  // Load tin nhắn broadcast\r\n  useEffect(() => {\r\n    const fetchBroadcasts = async () => {\r\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      const passphrase = prompt(\"🔐 Nhập mật khẩu để giải mã tin nhắn:\");\r\n      const privateKeyPem = decryptPrivateKey(user.encryptedPrivateKey, passphrase);\r\n      if (!privateKeyPem) return;\r\n\r\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\r\n\r\n      const decryptedMsgs = res.data.map(msg => {\r\n        try {\r\n          const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\r\n          const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\r\n          const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\r\n\r\n          return {\r\n            ...msg,\r\n            senderName: msg.sender?.username || \"admin\",\r\n            decryptedContent: plaintext || \"(Không thể giải mã)\"\r\n          };\r\n        } catch {\r\n          return {\r\n            ...msg,\r\n            senderName: msg.sender?.username || \"Không rõ\",\r\n            decryptedContent: \"(Lỗi giải mã)\"\r\n          };\r\n        }\r\n      });\r\n\r\n      setMessages(decryptedMsgs);\r\n    };\r\n\r\n    fetchBroadcasts();\r\n  }, [token]);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"subtitle1\">📢 Tin nhắn broadcast</Typography>\r\n      <List dense sx={{ maxHeight: 300, overflow: \"auto\", bgcolor: \"#f4f4f4\", mt: 2 }}>\r\n        {messages.map(msg => (\r\n          <ListItem key={msg.id}>\r\n            <ListItemText\r\n              primary={`Từ: ${msg.senderName}`}\r\n              secondary={msg.decryptedContent}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n\r\n      <Box sx={{ mt: 2 }}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Soạn tin broadcast\"\r\n          value={broadcastInput}\r\n          onChange={(e) => setBroadcastInput(e.target.value)}\r\n          multiline\r\n          rows={2}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}