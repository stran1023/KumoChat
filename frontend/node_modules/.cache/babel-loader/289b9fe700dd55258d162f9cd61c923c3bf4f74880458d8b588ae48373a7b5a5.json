{"ast":null,"code":"const axios = require(\"axios\");\nconst urlRegex = /(https?:\\/\\/[^\\s]+)/g;\nasync function checkPhishingLinks(content) {\n  const urls = content.match(urlRegex);\n  if (!urls) return {\n    safe: true\n  };\n  for (const url of urls) {\n    try {\n      var _result$data$verdicts, _result$data$verdicts2;\n      const scanRes = await axios.post(\"https://urlscan.io/api/v1/scan/\", {\n        url,\n        public: \"off\"\n      }, {\n        headers: {\n          \"API-Key\": process.env.URLSCAN_API_KEY,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const uuid = scanRes.data.uuid;\n\n      // Wait 5‚Äì10s cho xong ph√¢n t√≠ch\n      await new Promise(res => setTimeout(res, 7000));\n      const result = await axios.get(`https://urlscan.io/api/v1/result/${uuid}/`);\n      const verdict = (_result$data$verdicts = result.data.verdicts) === null || _result$data$verdicts === void 0 ? void 0 : (_result$data$verdicts2 = _result$data$verdicts.overall) === null || _result$data$verdicts2 === void 0 ? void 0 : _result$data$verdicts2.malicious;\n      if (verdict) {\n        return {\n          safe: false,\n          message: `üö® URL b·ªã ƒë√°nh gi√° l√† ƒë·ªôc h·∫°i: ${url}`\n        };\n      }\n    } catch (e) {\n      console.warn(\"‚ö†Ô∏è L·ªói khi scan URL:\", e.message);\n    }\n  }\n  return {\n    safe: true\n  };\n}\nmodule.exports = checkPhishingLinks;","map":{"version":3,"names":["axios","require","urlRegex","checkPhishingLinks","content","urls","match","safe","url","_result$data$verdicts","_result$data$verdicts2","scanRes","post","public","headers","process","env","URLSCAN_API_KEY","uuid","data","Promise","res","setTimeout","result","get","verdict","verdicts","overall","malicious","message","e","console","warn","module","exports"],"sources":["D:/Chuyen nganh/ƒê·ªì √°n ATTT/KumoChat/frontend/src/utils/checkmess.js"],"sourcesContent":["const axios = require(\"axios\");\r\nconst urlRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n\r\nasync function checkPhishingLinks(content) {\r\n  const urls = content.match(urlRegex);\r\n  if (!urls) return { safe: true };\r\n\r\n  for (const url of urls) {\r\n    try {\r\n      const scanRes = await axios.post(\"https://urlscan.io/api/v1/scan/\", {\r\n        url,\r\n        public: \"off\"\r\n      }, {\r\n        headers: {\r\n          \"API-Key\": process.env.URLSCAN_API_KEY,\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      });\r\n\r\n      const uuid = scanRes.data.uuid;\r\n\r\n      // Wait 5‚Äì10s cho xong ph√¢n t√≠ch\r\n      await new Promise(res => setTimeout(res, 7000));\r\n\r\n      const result = await axios.get(`https://urlscan.io/api/v1/result/${uuid}/`);\r\n      const verdict = result.data.verdicts?.overall?.malicious;\r\n\r\n      if (verdict) {\r\n        return { safe: false, message: `üö® URL b·ªã ƒë√°nh gi√° l√† ƒë·ªôc h·∫°i: ${url}` };\r\n      }\r\n    } catch (e) {\r\n      console.warn(\"‚ö†Ô∏è L·ªói khi scan URL:\", e.message);\r\n    }\r\n  }\r\n\r\n  return { safe: true };\r\n}\r\n\r\nmodule.exports = checkPhishingLinks;"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,QAAQ,GAAG,sBAAsB;AAEvC,eAAeC,kBAAkBA,CAACC,OAAO,EAAE;EACzC,MAAMC,IAAI,GAAGD,OAAO,CAACE,KAAK,CAACJ,QAAQ,CAAC;EACpC,IAAI,CAACG,IAAI,EAAE,OAAO;IAAEE,IAAI,EAAE;EAAK,CAAC;EAEhC,KAAK,MAAMC,GAAG,IAAIH,IAAI,EAAE;IACtB,IAAI;MAAA,IAAAI,qBAAA,EAAAC,sBAAA;MACF,MAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,iCAAiC,EAAE;QAClEJ,GAAG;QACHK,MAAM,EAAE;MACV,CAAC,EAAE;QACDC,OAAO,EAAE;UACP,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe;UACtC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAGP,OAAO,CAACQ,IAAI,CAACD,IAAI;;MAE9B;MACA,MAAM,IAAIE,OAAO,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC;MAE/C,MAAME,MAAM,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,oCAAoCN,IAAI,GAAG,CAAC;MAC3E,MAAMO,OAAO,IAAAhB,qBAAA,GAAGc,MAAM,CAACJ,IAAI,CAACO,QAAQ,cAAAjB,qBAAA,wBAAAC,sBAAA,GAApBD,qBAAA,CAAsBkB,OAAO,cAAAjB,sBAAA,uBAA7BA,sBAAA,CAA+BkB,SAAS;MAExD,IAAIH,OAAO,EAAE;QACX,OAAO;UAAElB,IAAI,EAAE,KAAK;UAAEsB,OAAO,EAAE,kCAAkCrB,GAAG;QAAG,CAAC;MAC1E;IACF,CAAC,CAAC,OAAOsB,CAAC,EAAE;MACVC,OAAO,CAACC,IAAI,CAAC,sBAAsB,EAAEF,CAAC,CAACD,OAAO,CAAC;IACjD;EACF;EAEA,OAAO;IAAEtB,IAAI,EAAE;EAAK,CAAC;AACvB;AAEA0B,MAAM,CAACC,OAAO,GAAG/B,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}