{"ast":null,"code":"var _jsxFileName = \"D:\\\\Chuyen nganh\\\\\\u0110\\u1ED3 \\xE1n ATTT\\\\KumoChat\\\\frontend\\\\src\\\\components\\\\chat\\\\BroadcastChat.jsx\",\n  _s2 = $RefreshSig$();\nimport { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { Box, Typography, List, ListItem, ListItemText, TextField, Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BroadcastChat() {\n  _s2();\n  var _s = $RefreshSig$();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  _s(useEffect(_s(() => {\n    _s();\n    const [broadcastInput, setBroadcastInput] = useState(\"\");\n    const handleSend = async () => {\n      if (!broadcastInput.trim()) return;\n\n      // g·ªçi h√†m sendBroadcast, truy·ªÅn broadcastInput l√†m n·ªôi dung\n      await sendBroadcast(broadcastInput);\n      setBroadcastInput(\"\");\n    };\n    const fetchBroadcasts = async () => {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      const passphrase = prompt(\"üîê Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£ tin nh·∫Øn:\");\n      const privateKeyPem = decryptPrivateKey(user.encryptedPrivateKey, passphrase);\n      if (!privateKeyPem) return;\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\n\n      // Gi·∫£i m√£ t·ª´ng tin nh·∫Øn\n      const decryptedMsgs = res.data.map(msg => {\n        try {\n          const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\n          const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\n          const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\n          return {\n            ...msg,\n            senderName: \"admin\",\n            decryptedContent: plaintext || \"(Kh√¥ng th·ªÉ gi·∫£i m√£)\"\n          };\n        } catch (err) {\n          var _msg$sender;\n          return {\n            ...msg,\n            senderName: ((_msg$sender = msg.sender) === null || _msg$sender === void 0 ? void 0 : _msg$sender.username) || \"Kh√¥ng r√µ\",\n            decryptedContent: \"(L·ªói gi·∫£i m√£)\"\n          };\n        }\n      });\n      setMessages(decryptedMsgs);\n    };\n    fetchBroadcasts();\n  }, \"Yw1ODgJPvuIYwgtunQKLC4tcoYk=\"), [token]), \"Yw1ODgJPvuIYwgtunQKLC4tcoYk=\");\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      children: \"\\uD83D\\uDCE2 Tin nh\\u1EAFn broadcast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        maxHeight: 300,\n        overflow: \"auto\",\n        bgcolor: \"#f4f4f4\",\n        mt: 2\n      },\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: `T·ª´: ${msg.senderName}`,\n          secondary: msg.decryptedContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"So\\u1EA1n tin broadcast\",\n        value: broadcastInput,\n        onChange: e => setBroadcastInput(e.target.value),\n        multiline: true,\n        rows: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        sx: {\n          mt: 1\n        },\n        onClick: handleSend,\n        children: \"G\\u1EEDi Broadcast \\uD83D\\uDCE2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n// üîê H√†m gi·∫£i m√£ private key ƒë√£ m√£ h√≥a b·∫±ng m·∫≠t kh·∫©u (b·∫°n ƒë√£ c√≥ r·ªìi)\n_s2(BroadcastChat, \"HF06nqxqle9OoMOHBeVV10Fh4QI=\");\n_c = BroadcastChat;\nfunction decryptPrivateKey(encryptedPem, passphrase) {\n  try {\n    const privateKey = forge.pki.decryptRsaPrivateKey(encryptedPem, passphrase);\n    return privateKey ? forge.pki.privateKeyToPem(privateKey) : null;\n  } catch {\n    return null;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"BroadcastChat\");","map":{"version":3,"names":["useEffect","useState","useContext","axios","forge","CryptoJS","AuthContext","Box","Typography","List","ListItem","ListItemText","TextField","Button","jsxDEV","_jsxDEV","BroadcastChat","_s2","_s","$RefreshSig$","token","messages","setMessages","broadcastInput","setBroadcastInput","handleSend","trim","sendBroadcast","fetchBroadcasts","res","get","process","env","REACT_APP_API_URL","headers","Authorization","user","JSON","parse","localStorage","getItem","passphrase","prompt","privateKeyPem","decryptPrivateKey","encryptedPrivateKey","privateKey","pki","privateKeyFromPem","decryptedMsgs","data","map","msg","aesKeyBytes","decrypt","util","decode64","encryptedAESKey","decrypted","AES","encryptedContent","plaintext","toString","enc","Utf8","senderName","decryptedContent","err","_msg$sender","sender","username","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","dense","sx","maxHeight","overflow","bgcolor","mt","primary","secondary","id","fullWidth","label","value","onChange","e","target","multiline","rows","onClick","_c","encryptedPem","decryptRsaPrivateKey","privateKeyToPem","$RefreshReg$"],"sources":["D:/Chuyen nganh/ƒê·ªì √°n ATTT/KumoChat/frontend/src/components/chat/BroadcastChat.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { Box, Typography, List, ListItem, ListItemText, TextField, Button } from \"@mui/material\";\r\n\r\nexport default function BroadcastChat() {\r\n  const { token } = useContext(AuthContext);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const [broadcastInput, setBroadcastInput] = useState(\"\");\r\n\r\n    const handleSend = async () => {\r\n      if (!broadcastInput.trim()) return;\r\n\r\n      // g·ªçi h√†m sendBroadcast, truy·ªÅn broadcastInput l√†m n·ªôi dung\r\n      await sendBroadcast(broadcastInput);\r\n      setBroadcastInput(\"\");\r\n    };\r\n\r\n    const fetchBroadcasts = async () => {\r\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      const passphrase = prompt(\"üîê Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£ tin nh·∫Øn:\");\r\n      const privateKeyPem = decryptPrivateKey(user.encryptedPrivateKey, passphrase);\r\n      if (!privateKeyPem) return;\r\n\r\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\r\n\r\n      // Gi·∫£i m√£ t·ª´ng tin nh·∫Øn\r\n      const decryptedMsgs = res.data.map(msg => {\r\n        try {\r\n          const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\r\n          const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\r\n          const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\r\n\r\n          return {\r\n            ...msg,\r\n            senderName: \"admin\",\r\n            decryptedContent: plaintext || \"(Kh√¥ng th·ªÉ gi·∫£i m√£)\"\r\n          };\r\n        } catch (err) {\r\n          return {\r\n            ...msg,\r\n            senderName: msg.sender?.username || \"Kh√¥ng r√µ\",\r\n            decryptedContent: \"(L·ªói gi·∫£i m√£)\"\r\n          };\r\n        }\r\n      });\r\n\r\n      setMessages(decryptedMsgs);\r\n    };\r\n\r\n    fetchBroadcasts();\r\n  }, [token]);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"subtitle1\">üì¢ Tin nh·∫Øn broadcast</Typography>\r\n      <List dense sx={{ maxHeight: 300, overflow: \"auto\", bgcolor: \"#f4f4f4\", mt: 2 }}>\r\n        {messages.map(msg => (\r\n          <ListItem key={msg.id}>\r\n            <ListItemText\r\n              primary={`T·ª´: ${msg.senderName}`}\r\n              secondary={msg.decryptedContent}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n\r\n      <Box sx={{ mt: 2 }}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"So·∫°n tin broadcast\"\r\n          value={broadcastInput}\r\n          onChange={(e) => setBroadcastInput(e.target.value)}\r\n          multiline\r\n          rows={2}\r\n        />\r\n        <Button variant=\"contained\" sx={{ mt: 1 }} onClick={handleSend}>\r\n          G·ª≠i Broadcast üì¢\r\n        </Button>\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\n// üîê H√†m gi·∫£i m√£ private key ƒë√£ m√£ h√≥a b·∫±ng m·∫≠t kh·∫©u (b·∫°n ƒë√£ c√≥ r·ªìi)\r\nfunction decryptPrivateKey(encryptedPem, passphrase) {\r\n  try {\r\n    const privateKey = forge.pki.decryptRsaPrivateKey(encryptedPem, passphrase);\r\n    return privateKey ? forge.pki.privateKeyToPem(privateKey) : null;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACvD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,GAAG,EAAEC,UAAU,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjG,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACtC,MAAM;IAAEC;EAAM,CAAC,GAAGlB,UAAU,CAACI,WAAW,CAAC;EACzC,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAE5CiB,EAAA,CAAAlB,SAAS,CAAAkB,EAAA,CAAC,MAAM;IAAAA,EAAA;IACd,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;IAExD,MAAMwB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI,CAACF,cAAc,CAACG,IAAI,CAAC,CAAC,EAAE;;MAE5B;MACA,MAAMC,aAAa,CAACJ,cAAc,CAAC;MACnCC,iBAAiB,CAAC,EAAE,CAAC;IACvB,CAAC;IAED,MAAMI,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMC,GAAG,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,qBAAqB,EAAE;QACjFC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUf,KAAK;QAAG;MAC9C,CAAC,CAAC;MAEF,MAAMgB,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MACrD,MAAMC,UAAU,GAAGC,MAAM,CAAC,uCAAuC,CAAC;MAClE,MAAMC,aAAa,GAAGC,iBAAiB,CAACR,IAAI,CAACS,mBAAmB,EAAEJ,UAAU,CAAC;MAC7E,IAAI,CAACE,aAAa,EAAE;MAEpB,MAAMG,UAAU,GAAG1C,KAAK,CAAC2C,GAAG,CAACC,iBAAiB,CAACL,aAAa,CAAC;;MAE7D;MACA,MAAMM,aAAa,GAAGpB,GAAG,CAACqB,IAAI,CAACC,GAAG,CAACC,GAAG,IAAI;QACxC,IAAI;UACF,MAAMC,WAAW,GAAGP,UAAU,CAACQ,OAAO,CAAClD,KAAK,CAACmD,IAAI,CAACC,QAAQ,CAACJ,GAAG,CAACK,eAAe,CAAC,EAAE,UAAU,CAAC;UAC5F,MAAMC,SAAS,GAAGrD,QAAQ,CAACsD,GAAG,CAACL,OAAO,CAACF,GAAG,CAACQ,gBAAgB,EAAEP,WAAW,CAAC;UACzE,MAAMQ,SAAS,GAAGH,SAAS,CAACI,QAAQ,CAACzD,QAAQ,CAAC0D,GAAG,CAACC,IAAI,CAAC;UAEvD,OAAO;YACL,GAAGZ,GAAG;YACNa,UAAU,EAAE,OAAO;YACnBC,gBAAgB,EAAEL,SAAS,IAAI;UACjC,CAAC;QACH,CAAC,CAAC,OAAOM,GAAG,EAAE;UAAA,IAAAC,WAAA;UACZ,OAAO;YACL,GAAGhB,GAAG;YACNa,UAAU,EAAE,EAAAG,WAAA,GAAAhB,GAAG,CAACiB,MAAM,cAAAD,WAAA,uBAAVA,WAAA,CAAYE,QAAQ,KAAI,UAAU;YAC9CJ,gBAAgB,EAAE;UACpB,CAAC;QACH;MACF,CAAC,CAAC;MAEF5C,WAAW,CAAC2B,aAAa,CAAC;IAC5B,CAAC;IAEDrB,eAAe,CAAC,CAAC;EACnB,CAAC,mCAAE,CAACR,KAAK,CAAC,CAAC;EAEX,oBACEL,OAAA,CAACR,GAAG;IAAAgE,QAAA,gBACFxD,OAAA,CAACP,UAAU;MAACgE,OAAO,EAAC,WAAW;MAAAD,QAAA,EAAC;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAClE7D,OAAA,CAACN,IAAI;MAACoE,KAAK;MAACC,EAAE,EAAE;QAAEC,SAAS,EAAE,GAAG;QAAEC,QAAQ,EAAE,MAAM;QAAEC,OAAO,EAAE,SAAS;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAX,QAAA,EAC7ElD,QAAQ,CAAC8B,GAAG,CAACC,GAAG,iBACfrC,OAAA,CAACL,QAAQ;QAAA6D,QAAA,eACPxD,OAAA,CAACJ,YAAY;UACXwE,OAAO,EAAE,OAAO/B,GAAG,CAACa,UAAU,EAAG;UACjCmB,SAAS,EAAEhC,GAAG,CAACc;QAAiB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC;MAAC,GAJWxB,GAAG,CAACiC,EAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKX,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEP7D,OAAA,CAACR,GAAG;MAACuE,EAAE,EAAE;QAAEI,EAAE,EAAE;MAAE,CAAE;MAAAX,QAAA,gBACjBxD,OAAA,CAACH,SAAS;QACR0E,SAAS;QACTC,KAAK,EAAC,yBAAoB;QAC1BC,KAAK,EAAEjE,cAAe;QACtBkE,QAAQ,EAAGC,CAAC,IAAKlE,iBAAiB,CAACkE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QACnDI,SAAS;QACTC,IAAI,EAAE;MAAE;QAAApB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF7D,OAAA,CAACF,MAAM;QAAC2D,OAAO,EAAC,WAAW;QAACM,EAAE,EAAE;UAAEI,EAAE,EAAE;QAAE,CAAE;QAACY,OAAO,EAAErE,UAAW;QAAA8C,QAAA,EAAC;MAEhE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV;;AAEA;AAAA3D,GAAA,CAtFwBD,aAAa;AAAA+E,EAAA,GAAb/E,aAAa;AAuFrC,SAAS4B,iBAAiBA,CAACoD,YAAY,EAAEvD,UAAU,EAAE;EACnD,IAAI;IACF,MAAMK,UAAU,GAAG1C,KAAK,CAAC2C,GAAG,CAACkD,oBAAoB,CAACD,YAAY,EAAEvD,UAAU,CAAC;IAC3E,OAAOK,UAAU,GAAG1C,KAAK,CAAC2C,GAAG,CAACmD,eAAe,CAACpD,UAAU,CAAC,GAAG,IAAI;EAClE,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF;AAAC,IAAAiD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}