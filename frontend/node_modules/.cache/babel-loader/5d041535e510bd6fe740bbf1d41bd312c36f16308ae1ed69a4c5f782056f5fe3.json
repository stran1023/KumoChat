{"ast":null,"code":"import forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\n\n// Giải mã RSA (dùng private key PEM + password)\nexport function decryptPrivateKey(encryptedPrivateKeyPem, password) {\n  try {\n    return forge.pki.decryptRsaPrivateKey(encryptedPrivateKeyPem, password);\n  } catch (err) {\n    console.error(\"❌ Sai mật khẩu hoặc private key lỗi\");\n    return null;\n  }\n}\n\n// Giải mã AES key đã được RSA mã hóa\nexport function decryptAESKey(encryptedAESKeyBase64, privateKey) {\n  const encryptedBytes = forge.util.decode64(encryptedAESKeyBase64);\n  const aesKey = privateKey.decrypt(encryptedBytes, \"RSA-OAEP\");\n  return aesKey;\n}\n\n// Giải mã nội dung bằng AES key\nexport function decryptContentAES(encryptedContent, aesKey) {\n  const bytes = CryptoJS.AES.decrypt(encryptedContent, aesKey);\n  return bytes.toString(CryptoJS.enc.Utf8);\n}\nexport function decryptGroupKey(encryptedBase64, privateKey) {\n  try {\n    const encryptedBytes = forge.util.decode64(encryptedBase64);\n    const rawKey = privateKey.decrypt(encryptedBytes, \"RSA-OAEP\");\n    return rawKey;\n  } catch (err) {\n    console.error(\"❌ Lỗi giải mã group key:\", err);\n    return null;\n  }\n}\nexport function decryptGroupMessage(encryptedBase64, aesKeyRaw) {\n  try {\n    const encryptedBytes = forge.util.decode64(encryptedBase64);\n\n    // Cắt IV (16 byte đầu)\n    const iv = encryptedBytes.slice(0, 16);\n    const ciphertext = encryptedBytes.slice(16);\n    const decipher = forge.cipher.createDecipher(\"AES-CBC\", aesKeyRaw);\n    decipher.start({\n      iv\n    });\n    decipher.update(forge.util.createBuffer(ciphertext));\n    const success = decipher.finish();\n    if (!success) throw new Error(\"❌ Giải mã thất bại (finish false)\");\n    return decipher.output.toString(\"utf8\");\n  } catch (err) {\n    console.error(\"❌ decryptGroupMessage failed:\", err);\n    return \"❌ Không giải mã được\";\n  }\n}","map":{"version":3,"names":["forge","CryptoJS","decryptPrivateKey","encryptedPrivateKeyPem","password","pki","decryptRsaPrivateKey","err","console","error","decryptAESKey","encryptedAESKeyBase64","privateKey","encryptedBytes","util","decode64","aesKey","decrypt","decryptContentAES","encryptedContent","bytes","AES","toString","enc","Utf8","decryptGroupKey","encryptedBase64","rawKey","decryptGroupMessage","aesKeyRaw","iv","slice","ciphertext","decipher","cipher","createDecipher","start","update","createBuffer","success","finish","Error","output"],"sources":["D:/Chuyen nganh/Đồ án ATTT/KumoChat/frontend/src/utils/decryption.js"],"sourcesContent":["import forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\n// Giải mã RSA (dùng private key PEM + password)\r\nexport function decryptPrivateKey(encryptedPrivateKeyPem, password) {\r\n  try {\r\n    return forge.pki.decryptRsaPrivateKey(encryptedPrivateKeyPem, password);\r\n  } catch (err) {\r\n    console.error(\"❌ Sai mật khẩu hoặc private key lỗi\");\r\n    return null;\r\n  }\r\n}\r\n\r\n// Giải mã AES key đã được RSA mã hóa\r\nexport function decryptAESKey(encryptedAESKeyBase64, privateKey) {\r\n  const encryptedBytes = forge.util.decode64(encryptedAESKeyBase64);\r\n  const aesKey = privateKey.decrypt(encryptedBytes, \"RSA-OAEP\");\r\n  return aesKey;\r\n}\r\n\r\n// Giải mã nội dung bằng AES key\r\nexport function decryptContentAES(encryptedContent, aesKey) {\r\n  const bytes = CryptoJS.AES.decrypt(encryptedContent, aesKey);\r\n  return bytes.toString(CryptoJS.enc.Utf8);\r\n}\r\n\r\nexport function decryptGroupKey(encryptedBase64, privateKey) {\r\n  try {\r\n    const encryptedBytes = forge.util.decode64(encryptedBase64);\r\n    const rawKey = privateKey.decrypt(encryptedBytes, \"RSA-OAEP\");\r\n    return rawKey;\r\n  } catch (err) {\r\n    console.error(\"❌ Lỗi giải mã group key:\", err);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function decryptGroupMessage(encryptedBase64, aesKeyRaw) {\r\n  try {\r\n    const encryptedBytes = forge.util.decode64(encryptedBase64);\r\n\r\n    // Cắt IV (16 byte đầu)\r\n    const iv = encryptedBytes.slice(0, 16);\r\n    const ciphertext = encryptedBytes.slice(16);\r\n\r\n    const decipher = forge.cipher.createDecipher(\"AES-CBC\", aesKeyRaw);\r\n    decipher.start({ iv });\r\n    decipher.update(forge.util.createBuffer(ciphertext));\r\n    const success = decipher.finish();\r\n\r\n    if (!success) throw new Error(\"❌ Giải mã thất bại (finish false)\");\r\n\r\n    return decipher.output.toString(\"utf8\");\r\n  } catch (err) {\r\n    console.error(\"❌ decryptGroupMessage failed:\", err);\r\n    return \"❌ Không giải mã được\";\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACA,OAAO,SAASC,iBAAiBA,CAACC,sBAAsB,EAAEC,QAAQ,EAAE;EAClE,IAAI;IACF,OAAOJ,KAAK,CAACK,GAAG,CAACC,oBAAoB,CAACH,sBAAsB,EAAEC,QAAQ,CAAC;EACzE,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASC,aAAaA,CAACC,qBAAqB,EAAEC,UAAU,EAAE;EAC/D,MAAMC,cAAc,GAAGb,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACJ,qBAAqB,CAAC;EACjE,MAAMK,MAAM,GAAGJ,UAAU,CAACK,OAAO,CAACJ,cAAc,EAAE,UAAU,CAAC;EAC7D,OAAOG,MAAM;AACf;;AAEA;AACA,OAAO,SAASE,iBAAiBA,CAACC,gBAAgB,EAAEH,MAAM,EAAE;EAC1D,MAAMI,KAAK,GAAGnB,QAAQ,CAACoB,GAAG,CAACJ,OAAO,CAACE,gBAAgB,EAAEH,MAAM,CAAC;EAC5D,OAAOI,KAAK,CAACE,QAAQ,CAACrB,QAAQ,CAACsB,GAAG,CAACC,IAAI,CAAC;AAC1C;AAEA,OAAO,SAASC,eAAeA,CAACC,eAAe,EAAEd,UAAU,EAAE;EAC3D,IAAI;IACF,MAAMC,cAAc,GAAGb,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACW,eAAe,CAAC;IAC3D,MAAMC,MAAM,GAAGf,UAAU,CAACK,OAAO,CAACJ,cAAc,EAAE,UAAU,CAAC;IAC7D,OAAOc,MAAM;EACf,CAAC,CAAC,OAAOpB,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;IAC9C,OAAO,IAAI;EACb;AACF;AAEA,OAAO,SAASqB,mBAAmBA,CAACF,eAAe,EAAEG,SAAS,EAAE;EAC9D,IAAI;IACF,MAAMhB,cAAc,GAAGb,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACW,eAAe,CAAC;;IAE3D;IACA,MAAMI,EAAE,GAAGjB,cAAc,CAACkB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IACtC,MAAMC,UAAU,GAAGnB,cAAc,CAACkB,KAAK,CAAC,EAAE,CAAC;IAE3C,MAAME,QAAQ,GAAGjC,KAAK,CAACkC,MAAM,CAACC,cAAc,CAAC,SAAS,EAAEN,SAAS,CAAC;IAClEI,QAAQ,CAACG,KAAK,CAAC;MAAEN;IAAG,CAAC,CAAC;IACtBG,QAAQ,CAACI,MAAM,CAACrC,KAAK,CAACc,IAAI,CAACwB,YAAY,CAACN,UAAU,CAAC,CAAC;IACpD,MAAMO,OAAO,GAAGN,QAAQ,CAACO,MAAM,CAAC,CAAC;IAEjC,IAAI,CAACD,OAAO,EAAE,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;IAElE,OAAOR,QAAQ,CAACS,MAAM,CAACpB,QAAQ,CAAC,MAAM,CAAC;EACzC,CAAC,CAAC,OAAOf,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;IACnD,OAAO,sBAAsB;EAC/B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}