{"ast":null,"code":"var _jsxFileName = \"D:\\\\Chuyen nganh\\\\\\u0110\\u1ED3 \\xE1n ATTT\\\\KumoChat\\\\frontend\\\\src\\\\components\\\\chat\\\\BroadcastChat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport forge from \"node-forge\";\nimport CryptoJS from \"crypto-js\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { Box, Typography, List, ListItem, ListItemText } from \"@mui/material\";\nimport { SocketContext } from \"../../context/SocketContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BroadcastChat() {\n  _s();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  const {\n    socket\n  } = useContext(SocketContext);\n  useEffect(() => {\n    const fetchBroadcasts = async () => {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      const passphrase = prompt(\"üîê Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£ tin nh·∫Øn:\");\n      const privateKeyPem = decryptPrivateKey(user.encryptedPrivateKey, passphrase);\n      if (!privateKeyPem) return;\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\n\n      // Gi·∫£i m√£ t·ª´ng tin nh·∫Øn\n      const decryptedMsgs = res.data.map(msg => {\n        try {\n          var _msg$sender;\n          const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\n          const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\n          console.log(decrypted);\n          const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\n          return {\n            ...msg,\n            senderName: ((_msg$sender = msg.sender) === null || _msg$sender === void 0 ? void 0 : _msg$sender.username) || \"admin\",\n            decryptedContent: plaintext || \"(Kh√¥ng th·ªÉ gi·∫£i m√£)\"\n          };\n        } catch (err) {\n          var _msg$sender2;\n          return {\n            ...msg,\n            senderName: ((_msg$sender2 = msg.sender) === null || _msg$sender2 === void 0 ? void 0 : _msg$sender2.username) || \"Kh√¥ng r√µ\",\n            decryptedContent: \"(L·ªói gi·∫£i m√£)\"\n          };\n        }\n      });\n      setMessages(decryptedMsgs);\n    };\n    fetchBroadcasts();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      children: \"\\uD83D\\uDCE2 Tin nh\\u1EAFn broadcast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        maxHeight: 300,\n        overflow: \"auto\",\n        bgcolor: \"#f4f4f4\",\n        mt: 2\n      },\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: `T·ª´: ${msg.senderName}`,\n          secondary: msg.decryptedContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n// üîê H√†m gi·∫£i m√£ private key ƒë√£ m√£ h√≥a b·∫±ng m·∫≠t kh·∫©u (b·∫°n ƒë√£ c√≥ r·ªìi)\n_s(BroadcastChat, \"GIKYD223mronWcazTHXL5DJXhYI=\");\n_c = BroadcastChat;\nfunction decryptPrivateKey(encryptedPem, passphrase) {\n  try {\n    const privateKey = forge.pki.decryptRsaPrivateKey(encryptedPem, passphrase);\n    return privateKey ? forge.pki.privateKeyToPem(privateKey) : null;\n  } catch {\n    return null;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"BroadcastChat\");","map":{"version":3,"names":["useEffect","useState","useContext","axios","forge","CryptoJS","AuthContext","Box","Typography","List","ListItem","ListItemText","SocketContext","jsxDEV","_jsxDEV","BroadcastChat","_s","token","messages","setMessages","socket","fetchBroadcasts","res","get","process","env","REACT_APP_API_URL","headers","Authorization","user","JSON","parse","localStorage","getItem","passphrase","prompt","privateKeyPem","decryptPrivateKey","encryptedPrivateKey","privateKey","pki","privateKeyFromPem","decryptedMsgs","data","map","msg","_msg$sender","aesKeyBytes","decrypt","util","decode64","encryptedAESKey","decrypted","AES","encryptedContent","console","log","plaintext","toString","enc","Utf8","senderName","sender","username","decryptedContent","err","_msg$sender2","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","dense","sx","maxHeight","overflow","bgcolor","mt","primary","secondary","id","_c","encryptedPem","decryptRsaPrivateKey","privateKeyToPem","$RefreshReg$"],"sources":["D:/Chuyen nganh/ƒê·ªì √°n ATTT/KumoChat/frontend/src/components/chat/BroadcastChat.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport forge from \"node-forge\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { Box, Typography, List, ListItem, ListItemText } from \"@mui/material\";\r\nimport { SocketContext } from \"../../context/SocketContext\";\r\n\r\nexport default function BroadcastChat() {\r\n  const { token } = useContext(AuthContext);\r\n  const [messages, setMessages] = useState([]);\r\n  const { socket } = useContext(SocketContext);\r\n\r\n  useEffect(() => {\r\n    const fetchBroadcasts = async () => {\r\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/messages/broadcast`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      const passphrase = prompt(\"üîê Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£ tin nh·∫Øn:\");\r\n      const privateKeyPem = decryptPrivateKey(user.encryptedPrivateKey, passphrase);\r\n      if (!privateKeyPem) return;\r\n\r\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\r\n\r\n      // Gi·∫£i m√£ t·ª´ng tin nh·∫Øn\r\n      const decryptedMsgs = res.data.map(msg => {\r\n        try {\r\n          const aesKeyBytes = privateKey.decrypt(forge.util.decode64(msg.encryptedAESKey), \"RSA-OAEP\");\r\n          const decrypted = CryptoJS.AES.decrypt(msg.encryptedContent, aesKeyBytes);\r\n          console.log(decrypted)\r\n          const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\r\n\r\n          return {\r\n            ...msg,\r\n            senderName: msg.sender?.username || \"admin\",\r\n            decryptedContent: plaintext || \"(Kh√¥ng th·ªÉ gi·∫£i m√£)\"\r\n          };\r\n        } catch (err) {\r\n          return {\r\n            ...msg,\r\n            senderName: msg.sender?.username || \"Kh√¥ng r√µ\",\r\n            decryptedContent: \"(L·ªói gi·∫£i m√£)\"\r\n          };\r\n        }\r\n      });\r\n\r\n      setMessages(decryptedMsgs);\r\n    };\r\n\r\n    fetchBroadcasts();\r\n  }, [token]);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"subtitle1\">üì¢ Tin nh·∫Øn broadcast</Typography>\r\n      <List dense sx={{ maxHeight: 300, overflow: \"auto\", bgcolor: \"#f4f4f4\", mt: 2 }}>\r\n        {messages.map(msg => (\r\n          <ListItem key={msg.id}>\r\n            <ListItemText\r\n              primary={`T·ª´: ${msg.senderName}`}\r\n              secondary={msg.decryptedContent}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n}\r\n\r\n// üîê H√†m gi·∫£i m√£ private key ƒë√£ m√£ h√≥a b·∫±ng m·∫≠t kh·∫©u (b·∫°n ƒë√£ c√≥ r·ªìi)\r\nfunction decryptPrivateKey(encryptedPem, passphrase) {\r\n  try {\r\n    const privateKey = forge.pki.decryptRsaPrivateKey(encryptedPem, passphrase);\r\n    return privateKey ? forge.pki.privateKeyToPem(privateKey) : null;\r\n  } catch {\r\n    return null;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}