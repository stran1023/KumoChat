
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model KeyPair
 * 
 */
export type KeyPair = $Result.DefaultSelection<Prisma.$KeyPairPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model UserDepartment
 * 
 */
export type UserDepartment = $Result.DefaultSelection<Prisma.$UserDepartmentPayload>
/**
 * Model GroupKeyShare
 * 
 */
export type GroupKeyShare = $Result.DefaultSelection<Prisma.$GroupKeySharePayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model EncryptedAESKey
 * 
 */
export type EncryptedAESKey = $Result.DefaultSelection<Prisma.$EncryptedAESKeyPayload>
/**
 * Model LoginLog
 * 
 */
export type LoginLog = $Result.DefaultSelection<Prisma.$LoginLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  LEADER: 'LEADER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Action: {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT'
};

export type Action = (typeof Action)[keyof typeof Action]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Action = $Enums.Action

export const Action: typeof $Enums.Action

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.keyPair`: Exposes CRUD operations for the **KeyPair** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeyPairs
    * const keyPairs = await prisma.keyPair.findMany()
    * ```
    */
  get keyPair(): Prisma.KeyPairDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userDepartment`: Exposes CRUD operations for the **UserDepartment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDepartments
    * const userDepartments = await prisma.userDepartment.findMany()
    * ```
    */
  get userDepartment(): Prisma.UserDepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupKeyShare`: Exposes CRUD operations for the **GroupKeyShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupKeyShares
    * const groupKeyShares = await prisma.groupKeyShare.findMany()
    * ```
    */
  get groupKeyShare(): Prisma.GroupKeyShareDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.encryptedAESKey`: Exposes CRUD operations for the **EncryptedAESKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EncryptedAESKeys
    * const encryptedAESKeys = await prisma.encryptedAESKey.findMany()
    * ```
    */
  get encryptedAESKey(): Prisma.EncryptedAESKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.loginLog`: Exposes CRUD operations for the **LoginLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoginLogs
    * const loginLogs = await prisma.loginLog.findMany()
    * ```
    */
  get loginLog(): Prisma.LoginLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    KeyPair: 'KeyPair',
    Department: 'Department',
    UserDepartment: 'UserDepartment',
    GroupKeyShare: 'GroupKeyShare',
    Message: 'Message',
    EncryptedAESKey: 'EncryptedAESKey',
    LoginLog: 'LoginLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "keyPair" | "department" | "userDepartment" | "groupKeyShare" | "message" | "encryptedAESKey" | "loginLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      KeyPair: {
        payload: Prisma.$KeyPairPayload<ExtArgs>
        fields: Prisma.KeyPairFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeyPairFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeyPairFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>
          }
          findFirst: {
            args: Prisma.KeyPairFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeyPairFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>
          }
          findMany: {
            args: Prisma.KeyPairFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>[]
          }
          create: {
            args: Prisma.KeyPairCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>
          }
          createMany: {
            args: Prisma.KeyPairCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeyPairCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>[]
          }
          delete: {
            args: Prisma.KeyPairDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>
          }
          update: {
            args: Prisma.KeyPairUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>
          }
          deleteMany: {
            args: Prisma.KeyPairDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeyPairUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KeyPairUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>[]
          }
          upsert: {
            args: Prisma.KeyPairUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPairPayload>
          }
          aggregate: {
            args: Prisma.KeyPairAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeyPair>
          }
          groupBy: {
            args: Prisma.KeyPairGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeyPairGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeyPairCountArgs<ExtArgs>
            result: $Utils.Optional<KeyPairCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      UserDepartment: {
        payload: Prisma.$UserDepartmentPayload<ExtArgs>
        fields: Prisma.UserDepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserDepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserDepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>
          }
          findFirst: {
            args: Prisma.UserDepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserDepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>
          }
          findMany: {
            args: Prisma.UserDepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>[]
          }
          create: {
            args: Prisma.UserDepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>
          }
          createMany: {
            args: Prisma.UserDepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserDepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>[]
          }
          delete: {
            args: Prisma.UserDepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>
          }
          update: {
            args: Prisma.UserDepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>
          }
          deleteMany: {
            args: Prisma.UserDepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserDepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserDepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>[]
          }
          upsert: {
            args: Prisma.UserDepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDepartmentPayload>
          }
          aggregate: {
            args: Prisma.UserDepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserDepartment>
          }
          groupBy: {
            args: Prisma.UserDepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserDepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserDepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<UserDepartmentCountAggregateOutputType> | number
          }
        }
      }
      GroupKeyShare: {
        payload: Prisma.$GroupKeySharePayload<ExtArgs>
        fields: Prisma.GroupKeyShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupKeyShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupKeyShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>
          }
          findFirst: {
            args: Prisma.GroupKeyShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupKeyShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>
          }
          findMany: {
            args: Prisma.GroupKeyShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>[]
          }
          create: {
            args: Prisma.GroupKeyShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>
          }
          createMany: {
            args: Prisma.GroupKeyShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupKeyShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>[]
          }
          delete: {
            args: Prisma.GroupKeyShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>
          }
          update: {
            args: Prisma.GroupKeyShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>
          }
          deleteMany: {
            args: Prisma.GroupKeyShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupKeyShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupKeyShareUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>[]
          }
          upsert: {
            args: Prisma.GroupKeyShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupKeySharePayload>
          }
          aggregate: {
            args: Prisma.GroupKeyShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupKeyShare>
          }
          groupBy: {
            args: Prisma.GroupKeyShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupKeyShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupKeyShareCountArgs<ExtArgs>
            result: $Utils.Optional<GroupKeyShareCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      EncryptedAESKey: {
        payload: Prisma.$EncryptedAESKeyPayload<ExtArgs>
        fields: Prisma.EncryptedAESKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EncryptedAESKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EncryptedAESKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>
          }
          findFirst: {
            args: Prisma.EncryptedAESKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EncryptedAESKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>
          }
          findMany: {
            args: Prisma.EncryptedAESKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>[]
          }
          create: {
            args: Prisma.EncryptedAESKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>
          }
          createMany: {
            args: Prisma.EncryptedAESKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EncryptedAESKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>[]
          }
          delete: {
            args: Prisma.EncryptedAESKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>
          }
          update: {
            args: Prisma.EncryptedAESKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>
          }
          deleteMany: {
            args: Prisma.EncryptedAESKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EncryptedAESKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EncryptedAESKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>[]
          }
          upsert: {
            args: Prisma.EncryptedAESKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptedAESKeyPayload>
          }
          aggregate: {
            args: Prisma.EncryptedAESKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEncryptedAESKey>
          }
          groupBy: {
            args: Prisma.EncryptedAESKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<EncryptedAESKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.EncryptedAESKeyCountArgs<ExtArgs>
            result: $Utils.Optional<EncryptedAESKeyCountAggregateOutputType> | number
          }
        }
      }
      LoginLog: {
        payload: Prisma.$LoginLogPayload<ExtArgs>
        fields: Prisma.LoginLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoginLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoginLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          findFirst: {
            args: Prisma.LoginLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoginLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          findMany: {
            args: Prisma.LoginLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>[]
          }
          create: {
            args: Prisma.LoginLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          createMany: {
            args: Prisma.LoginLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoginLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>[]
          }
          delete: {
            args: Prisma.LoginLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          update: {
            args: Prisma.LoginLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          deleteMany: {
            args: Prisma.LoginLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoginLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoginLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>[]
          }
          upsert: {
            args: Prisma.LoginLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginLogPayload>
          }
          aggregate: {
            args: Prisma.LoginLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoginLog>
          }
          groupBy: {
            args: Prisma.LoginLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoginLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoginLogCountArgs<ExtArgs>
            result: $Utils.Optional<LoginLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    keyPair?: KeyPairOmit
    department?: DepartmentOmit
    userDepartment?: UserDepartmentOmit
    groupKeyShare?: GroupKeyShareOmit
    message?: MessageOmit
    encryptedAESKey?: EncryptedAESKeyOmit
    loginLog?: LoginLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    departments: number
    groupKeyShares: number
    messagesSent: number
    messagesReceived: number
    loginLogs: number
    ledDepartments: number
    createdDepartments: number
    encryptedAESKeys: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departments?: boolean | UserCountOutputTypeCountDepartmentsArgs
    groupKeyShares?: boolean | UserCountOutputTypeCountGroupKeySharesArgs
    messagesSent?: boolean | UserCountOutputTypeCountMessagesSentArgs
    messagesReceived?: boolean | UserCountOutputTypeCountMessagesReceivedArgs
    loginLogs?: boolean | UserCountOutputTypeCountLoginLogsArgs
    ledDepartments?: boolean | UserCountOutputTypeCountLedDepartmentsArgs
    createdDepartments?: boolean | UserCountOutputTypeCountCreatedDepartmentsArgs
    encryptedAESKeys?: boolean | UserCountOutputTypeCountEncryptedAESKeysArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGroupKeySharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupKeyShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoginLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEncryptedAESKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EncryptedAESKeyWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
    messages: number
    groupKeyShares: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
    messages?: boolean | DepartmentCountOutputTypeCountMessagesArgs
    groupKeyShares?: boolean | DepartmentCountOutputTypeCountGroupKeySharesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDepartmentWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountGroupKeySharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupKeyShareWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    encryptedAESKeys: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encryptedAESKeys?: boolean | MessageCountOutputTypeCountEncryptedAESKeysArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountEncryptedAESKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EncryptedAESKeyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    isApproved: boolean | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    isApproved: boolean | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    passwordHash: number
    isApproved: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    isApproved?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    isApproved?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    isApproved?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    passwordHash: string
    isApproved: boolean
    role: $Enums.Role
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    isApproved?: boolean
    role?: boolean
    createdAt?: boolean
    keys?: boolean | User$keysArgs<ExtArgs>
    departments?: boolean | User$departmentsArgs<ExtArgs>
    groupKeyShares?: boolean | User$groupKeySharesArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | User$messagesReceivedArgs<ExtArgs>
    loginLogs?: boolean | User$loginLogsArgs<ExtArgs>
    ledDepartments?: boolean | User$ledDepartmentsArgs<ExtArgs>
    createdDepartments?: boolean | User$createdDepartmentsArgs<ExtArgs>
    encryptedAESKeys?: boolean | User$encryptedAESKeysArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    isApproved?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    isApproved?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    isApproved?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "passwordHash" | "isApproved" | "role" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keys?: boolean | User$keysArgs<ExtArgs>
    departments?: boolean | User$departmentsArgs<ExtArgs>
    groupKeyShares?: boolean | User$groupKeySharesArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | User$messagesReceivedArgs<ExtArgs>
    loginLogs?: boolean | User$loginLogsArgs<ExtArgs>
    ledDepartments?: boolean | User$ledDepartmentsArgs<ExtArgs>
    createdDepartments?: boolean | User$createdDepartmentsArgs<ExtArgs>
    encryptedAESKeys?: boolean | User$encryptedAESKeysArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      keys: Prisma.$KeyPairPayload<ExtArgs> | null
      departments: Prisma.$UserDepartmentPayload<ExtArgs>[]
      groupKeyShares: Prisma.$GroupKeySharePayload<ExtArgs>[]
      messagesSent: Prisma.$MessagePayload<ExtArgs>[]
      messagesReceived: Prisma.$MessagePayload<ExtArgs>[]
      loginLogs: Prisma.$LoginLogPayload<ExtArgs>[]
      ledDepartments: Prisma.$DepartmentPayload<ExtArgs>[]
      createdDepartments: Prisma.$DepartmentPayload<ExtArgs>[]
      encryptedAESKeys: Prisma.$EncryptedAESKeyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      passwordHash: string
      isApproved: boolean
      role: $Enums.Role
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    keys<T extends User$keysArgs<ExtArgs> = {}>(args?: Subset<T, User$keysArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    departments<T extends User$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    groupKeyShares<T extends User$groupKeySharesArgs<ExtArgs> = {}>(args?: Subset<T, User$groupKeySharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messagesSent<T extends User$messagesSentArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messagesReceived<T extends User$messagesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    loginLogs<T extends User$loginLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$loginLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ledDepartments<T extends User$ledDepartmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$ledDepartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdDepartments<T extends User$createdDepartmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdDepartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    encryptedAESKeys<T extends User$encryptedAESKeysArgs<ExtArgs> = {}>(args?: Subset<T, User$encryptedAESKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly isApproved: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.keys
   */
  export type User$keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    where?: KeyPairWhereInput
  }

  /**
   * User.departments
   */
  export type User$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    where?: UserDepartmentWhereInput
    orderBy?: UserDepartmentOrderByWithRelationInput | UserDepartmentOrderByWithRelationInput[]
    cursor?: UserDepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDepartmentScalarFieldEnum | UserDepartmentScalarFieldEnum[]
  }

  /**
   * User.groupKeyShares
   */
  export type User$groupKeySharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    where?: GroupKeyShareWhereInput
    orderBy?: GroupKeyShareOrderByWithRelationInput | GroupKeyShareOrderByWithRelationInput[]
    cursor?: GroupKeyShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupKeyShareScalarFieldEnum | GroupKeyShareScalarFieldEnum[]
  }

  /**
   * User.messagesSent
   */
  export type User$messagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.messagesReceived
   */
  export type User$messagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.loginLogs
   */
  export type User$loginLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    where?: LoginLogWhereInput
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    cursor?: LoginLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * User.ledDepartments
   */
  export type User$ledDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.createdDepartments
   */
  export type User$createdDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.encryptedAESKeys
   */
  export type User$encryptedAESKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    where?: EncryptedAESKeyWhereInput
    orderBy?: EncryptedAESKeyOrderByWithRelationInput | EncryptedAESKeyOrderByWithRelationInput[]
    cursor?: EncryptedAESKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EncryptedAESKeyScalarFieldEnum | EncryptedAESKeyScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model KeyPair
   */

  export type AggregateKeyPair = {
    _count: KeyPairCountAggregateOutputType | null
    _min: KeyPairMinAggregateOutputType | null
    _max: KeyPairMaxAggregateOutputType | null
  }

  export type KeyPairMinAggregateOutputType = {
    id: string | null
    userId: string | null
    publicKey: string | null
    encryptedPrivKey: string | null
  }

  export type KeyPairMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    publicKey: string | null
    encryptedPrivKey: string | null
  }

  export type KeyPairCountAggregateOutputType = {
    id: number
    userId: number
    publicKey: number
    encryptedPrivKey: number
    _all: number
  }


  export type KeyPairMinAggregateInputType = {
    id?: true
    userId?: true
    publicKey?: true
    encryptedPrivKey?: true
  }

  export type KeyPairMaxAggregateInputType = {
    id?: true
    userId?: true
    publicKey?: true
    encryptedPrivKey?: true
  }

  export type KeyPairCountAggregateInputType = {
    id?: true
    userId?: true
    publicKey?: true
    encryptedPrivKey?: true
    _all?: true
  }

  export type KeyPairAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyPair to aggregate.
     */
    where?: KeyPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyPairs to fetch.
     */
    orderBy?: KeyPairOrderByWithRelationInput | KeyPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeyPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyPairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeyPairs
    **/
    _count?: true | KeyPairCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyPairMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyPairMaxAggregateInputType
  }

  export type GetKeyPairAggregateType<T extends KeyPairAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyPair]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyPair[P]>
      : GetScalarType<T[P], AggregateKeyPair[P]>
  }




  export type KeyPairGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyPairWhereInput
    orderBy?: KeyPairOrderByWithAggregationInput | KeyPairOrderByWithAggregationInput[]
    by: KeyPairScalarFieldEnum[] | KeyPairScalarFieldEnum
    having?: KeyPairScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyPairCountAggregateInputType | true
    _min?: KeyPairMinAggregateInputType
    _max?: KeyPairMaxAggregateInputType
  }

  export type KeyPairGroupByOutputType = {
    id: string
    userId: string
    publicKey: string
    encryptedPrivKey: string
    _count: KeyPairCountAggregateOutputType | null
    _min: KeyPairMinAggregateOutputType | null
    _max: KeyPairMaxAggregateOutputType | null
  }

  type GetKeyPairGroupByPayload<T extends KeyPairGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeyPairGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyPairGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyPairGroupByOutputType[P]>
            : GetScalarType<T[P], KeyPairGroupByOutputType[P]>
        }
      >
    >


  export type KeyPairSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    encryptedPrivKey?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyPair"]>

  export type KeyPairSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    encryptedPrivKey?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyPair"]>

  export type KeyPairSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    encryptedPrivKey?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyPair"]>

  export type KeyPairSelectScalar = {
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    encryptedPrivKey?: boolean
  }

  export type KeyPairOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "publicKey" | "encryptedPrivKey", ExtArgs["result"]["keyPair"]>
  export type KeyPairInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KeyPairIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KeyPairIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $KeyPairPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KeyPair"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      publicKey: string
      encryptedPrivKey: string
    }, ExtArgs["result"]["keyPair"]>
    composites: {}
  }

  type KeyPairGetPayload<S extends boolean | null | undefined | KeyPairDefaultArgs> = $Result.GetResult<Prisma.$KeyPairPayload, S>

  type KeyPairCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KeyPairFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KeyPairCountAggregateInputType | true
    }

  export interface KeyPairDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KeyPair'], meta: { name: 'KeyPair' } }
    /**
     * Find zero or one KeyPair that matches the filter.
     * @param {KeyPairFindUniqueArgs} args - Arguments to find a KeyPair
     * @example
     * // Get one KeyPair
     * const keyPair = await prisma.keyPair.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeyPairFindUniqueArgs>(args: SelectSubset<T, KeyPairFindUniqueArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KeyPair that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KeyPairFindUniqueOrThrowArgs} args - Arguments to find a KeyPair
     * @example
     * // Get one KeyPair
     * const keyPair = await prisma.keyPair.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeyPairFindUniqueOrThrowArgs>(args: SelectSubset<T, KeyPairFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeyPair that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyPairFindFirstArgs} args - Arguments to find a KeyPair
     * @example
     * // Get one KeyPair
     * const keyPair = await prisma.keyPair.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeyPairFindFirstArgs>(args?: SelectSubset<T, KeyPairFindFirstArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeyPair that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyPairFindFirstOrThrowArgs} args - Arguments to find a KeyPair
     * @example
     * // Get one KeyPair
     * const keyPair = await prisma.keyPair.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeyPairFindFirstOrThrowArgs>(args?: SelectSubset<T, KeyPairFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KeyPairs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyPairFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeyPairs
     * const keyPairs = await prisma.keyPair.findMany()
     * 
     * // Get first 10 KeyPairs
     * const keyPairs = await prisma.keyPair.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyPairWithIdOnly = await prisma.keyPair.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KeyPairFindManyArgs>(args?: SelectSubset<T, KeyPairFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KeyPair.
     * @param {KeyPairCreateArgs} args - Arguments to create a KeyPair.
     * @example
     * // Create one KeyPair
     * const KeyPair = await prisma.keyPair.create({
     *   data: {
     *     // ... data to create a KeyPair
     *   }
     * })
     * 
     */
    create<T extends KeyPairCreateArgs>(args: SelectSubset<T, KeyPairCreateArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KeyPairs.
     * @param {KeyPairCreateManyArgs} args - Arguments to create many KeyPairs.
     * @example
     * // Create many KeyPairs
     * const keyPair = await prisma.keyPair.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeyPairCreateManyArgs>(args?: SelectSubset<T, KeyPairCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KeyPairs and returns the data saved in the database.
     * @param {KeyPairCreateManyAndReturnArgs} args - Arguments to create many KeyPairs.
     * @example
     * // Create many KeyPairs
     * const keyPair = await prisma.keyPair.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KeyPairs and only return the `id`
     * const keyPairWithIdOnly = await prisma.keyPair.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeyPairCreateManyAndReturnArgs>(args?: SelectSubset<T, KeyPairCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KeyPair.
     * @param {KeyPairDeleteArgs} args - Arguments to delete one KeyPair.
     * @example
     * // Delete one KeyPair
     * const KeyPair = await prisma.keyPair.delete({
     *   where: {
     *     // ... filter to delete one KeyPair
     *   }
     * })
     * 
     */
    delete<T extends KeyPairDeleteArgs>(args: SelectSubset<T, KeyPairDeleteArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KeyPair.
     * @param {KeyPairUpdateArgs} args - Arguments to update one KeyPair.
     * @example
     * // Update one KeyPair
     * const keyPair = await prisma.keyPair.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeyPairUpdateArgs>(args: SelectSubset<T, KeyPairUpdateArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KeyPairs.
     * @param {KeyPairDeleteManyArgs} args - Arguments to filter KeyPairs to delete.
     * @example
     * // Delete a few KeyPairs
     * const { count } = await prisma.keyPair.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeyPairDeleteManyArgs>(args?: SelectSubset<T, KeyPairDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeyPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyPairUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeyPairs
     * const keyPair = await prisma.keyPair.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeyPairUpdateManyArgs>(args: SelectSubset<T, KeyPairUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeyPairs and returns the data updated in the database.
     * @param {KeyPairUpdateManyAndReturnArgs} args - Arguments to update many KeyPairs.
     * @example
     * // Update many KeyPairs
     * const keyPair = await prisma.keyPair.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KeyPairs and only return the `id`
     * const keyPairWithIdOnly = await prisma.keyPair.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KeyPairUpdateManyAndReturnArgs>(args: SelectSubset<T, KeyPairUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KeyPair.
     * @param {KeyPairUpsertArgs} args - Arguments to update or create a KeyPair.
     * @example
     * // Update or create a KeyPair
     * const keyPair = await prisma.keyPair.upsert({
     *   create: {
     *     // ... data to create a KeyPair
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeyPair we want to update
     *   }
     * })
     */
    upsert<T extends KeyPairUpsertArgs>(args: SelectSubset<T, KeyPairUpsertArgs<ExtArgs>>): Prisma__KeyPairClient<$Result.GetResult<Prisma.$KeyPairPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KeyPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyPairCountArgs} args - Arguments to filter KeyPairs to count.
     * @example
     * // Count the number of KeyPairs
     * const count = await prisma.keyPair.count({
     *   where: {
     *     // ... the filter for the KeyPairs we want to count
     *   }
     * })
    **/
    count<T extends KeyPairCountArgs>(
      args?: Subset<T, KeyPairCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyPairCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeyPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyPairAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyPairAggregateArgs>(args: Subset<T, KeyPairAggregateArgs>): Prisma.PrismaPromise<GetKeyPairAggregateType<T>>

    /**
     * Group by KeyPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyPairGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyPairGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyPairGroupByArgs['orderBy'] }
        : { orderBy?: KeyPairGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyPairGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyPairGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KeyPair model
   */
  readonly fields: KeyPairFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeyPair.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeyPairClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KeyPair model
   */
  interface KeyPairFieldRefs {
    readonly id: FieldRef<"KeyPair", 'String'>
    readonly userId: FieldRef<"KeyPair", 'String'>
    readonly publicKey: FieldRef<"KeyPair", 'String'>
    readonly encryptedPrivKey: FieldRef<"KeyPair", 'String'>
  }
    

  // Custom InputTypes
  /**
   * KeyPair findUnique
   */
  export type KeyPairFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * Filter, which KeyPair to fetch.
     */
    where: KeyPairWhereUniqueInput
  }

  /**
   * KeyPair findUniqueOrThrow
   */
  export type KeyPairFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * Filter, which KeyPair to fetch.
     */
    where: KeyPairWhereUniqueInput
  }

  /**
   * KeyPair findFirst
   */
  export type KeyPairFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * Filter, which KeyPair to fetch.
     */
    where?: KeyPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyPairs to fetch.
     */
    orderBy?: KeyPairOrderByWithRelationInput | KeyPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyPairs.
     */
    cursor?: KeyPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyPairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyPairs.
     */
    distinct?: KeyPairScalarFieldEnum | KeyPairScalarFieldEnum[]
  }

  /**
   * KeyPair findFirstOrThrow
   */
  export type KeyPairFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * Filter, which KeyPair to fetch.
     */
    where?: KeyPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyPairs to fetch.
     */
    orderBy?: KeyPairOrderByWithRelationInput | KeyPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyPairs.
     */
    cursor?: KeyPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyPairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyPairs.
     */
    distinct?: KeyPairScalarFieldEnum | KeyPairScalarFieldEnum[]
  }

  /**
   * KeyPair findMany
   */
  export type KeyPairFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * Filter, which KeyPairs to fetch.
     */
    where?: KeyPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyPairs to fetch.
     */
    orderBy?: KeyPairOrderByWithRelationInput | KeyPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeyPairs.
     */
    cursor?: KeyPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyPairs.
     */
    skip?: number
    distinct?: KeyPairScalarFieldEnum | KeyPairScalarFieldEnum[]
  }

  /**
   * KeyPair create
   */
  export type KeyPairCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * The data needed to create a KeyPair.
     */
    data: XOR<KeyPairCreateInput, KeyPairUncheckedCreateInput>
  }

  /**
   * KeyPair createMany
   */
  export type KeyPairCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KeyPairs.
     */
    data: KeyPairCreateManyInput | KeyPairCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KeyPair createManyAndReturn
   */
  export type KeyPairCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * The data used to create many KeyPairs.
     */
    data: KeyPairCreateManyInput | KeyPairCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeyPair update
   */
  export type KeyPairUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * The data needed to update a KeyPair.
     */
    data: XOR<KeyPairUpdateInput, KeyPairUncheckedUpdateInput>
    /**
     * Choose, which KeyPair to update.
     */
    where: KeyPairWhereUniqueInput
  }

  /**
   * KeyPair updateMany
   */
  export type KeyPairUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KeyPairs.
     */
    data: XOR<KeyPairUpdateManyMutationInput, KeyPairUncheckedUpdateManyInput>
    /**
     * Filter which KeyPairs to update
     */
    where?: KeyPairWhereInput
    /**
     * Limit how many KeyPairs to update.
     */
    limit?: number
  }

  /**
   * KeyPair updateManyAndReturn
   */
  export type KeyPairUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * The data used to update KeyPairs.
     */
    data: XOR<KeyPairUpdateManyMutationInput, KeyPairUncheckedUpdateManyInput>
    /**
     * Filter which KeyPairs to update
     */
    where?: KeyPairWhereInput
    /**
     * Limit how many KeyPairs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeyPair upsert
   */
  export type KeyPairUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * The filter to search for the KeyPair to update in case it exists.
     */
    where: KeyPairWhereUniqueInput
    /**
     * In case the KeyPair found by the `where` argument doesn't exist, create a new KeyPair with this data.
     */
    create: XOR<KeyPairCreateInput, KeyPairUncheckedCreateInput>
    /**
     * In case the KeyPair was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeyPairUpdateInput, KeyPairUncheckedUpdateInput>
  }

  /**
   * KeyPair delete
   */
  export type KeyPairDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
    /**
     * Filter which KeyPair to delete.
     */
    where: KeyPairWhereUniqueInput
  }

  /**
   * KeyPair deleteMany
   */
  export type KeyPairDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyPairs to delete
     */
    where?: KeyPairWhereInput
    /**
     * Limit how many KeyPairs to delete.
     */
    limit?: number
  }

  /**
   * KeyPair without action
   */
  export type KeyPairDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyPair
     */
    select?: KeyPairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyPair
     */
    omit?: KeyPairOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyPairInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    leaderId: string | null
    createdById: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    leaderId: string | null
    createdById: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    leaderId: number
    createdById: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    leaderId?: true
    createdById?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    leaderId?: true
    createdById?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    leaderId?: true
    createdById?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    leaderId: string | null
    createdById: string | null
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    leaderId?: boolean
    createdById?: boolean
    leader?: boolean | Department$leaderArgs<ExtArgs>
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    messages?: boolean | Department$messagesArgs<ExtArgs>
    groupKeyShares?: boolean | Department$groupKeySharesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    leaderId?: boolean
    createdById?: boolean
    leader?: boolean | Department$leaderArgs<ExtArgs>
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    leaderId?: boolean
    createdById?: boolean
    leader?: boolean | Department$leaderArgs<ExtArgs>
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    leaderId?: boolean
    createdById?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "leaderId" | "createdById", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leader?: boolean | Department$leaderArgs<ExtArgs>
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    messages?: boolean | Department$messagesArgs<ExtArgs>
    groupKeyShares?: boolean | Department$groupKeySharesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leader?: boolean | Department$leaderArgs<ExtArgs>
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leader?: boolean | Department$leaderArgs<ExtArgs>
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      leader: Prisma.$UserPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserDepartmentPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      groupKeyShares: Prisma.$GroupKeySharePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      leaderId: string | null
      createdById: string | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leader<T extends Department$leaderArgs<ExtArgs> = {}>(args?: Subset<T, Department$leaderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Department$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Department$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends Department$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Department$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    groupKeyShares<T extends Department$groupKeySharesArgs<ExtArgs> = {}>(args?: Subset<T, Department$groupKeySharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly leaderId: FieldRef<"Department", 'String'>
    readonly createdById: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.leader
   */
  export type Department$leaderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.createdBy
   */
  export type Department$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    where?: UserDepartmentWhereInput
    orderBy?: UserDepartmentOrderByWithRelationInput | UserDepartmentOrderByWithRelationInput[]
    cursor?: UserDepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDepartmentScalarFieldEnum | UserDepartmentScalarFieldEnum[]
  }

  /**
   * Department.messages
   */
  export type Department$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Department.groupKeyShares
   */
  export type Department$groupKeySharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    where?: GroupKeyShareWhereInput
    orderBy?: GroupKeyShareOrderByWithRelationInput | GroupKeyShareOrderByWithRelationInput[]
    cursor?: GroupKeyShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupKeyShareScalarFieldEnum | GroupKeyShareScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model UserDepartment
   */

  export type AggregateUserDepartment = {
    _count: UserDepartmentCountAggregateOutputType | null
    _min: UserDepartmentMinAggregateOutputType | null
    _max: UserDepartmentMaxAggregateOutputType | null
  }

  export type UserDepartmentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
  }

  export type UserDepartmentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
  }

  export type UserDepartmentCountAggregateOutputType = {
    id: number
    userId: number
    departmentId: number
    _all: number
  }


  export type UserDepartmentMinAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
  }

  export type UserDepartmentMaxAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
  }

  export type UserDepartmentCountAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    _all?: true
  }

  export type UserDepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDepartment to aggregate.
     */
    where?: UserDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDepartments to fetch.
     */
    orderBy?: UserDepartmentOrderByWithRelationInput | UserDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDepartments
    **/
    _count?: true | UserDepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDepartmentMaxAggregateInputType
  }

  export type GetUserDepartmentAggregateType<T extends UserDepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDepartment[P]>
      : GetScalarType<T[P], AggregateUserDepartment[P]>
  }




  export type UserDepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDepartmentWhereInput
    orderBy?: UserDepartmentOrderByWithAggregationInput | UserDepartmentOrderByWithAggregationInput[]
    by: UserDepartmentScalarFieldEnum[] | UserDepartmentScalarFieldEnum
    having?: UserDepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDepartmentCountAggregateInputType | true
    _min?: UserDepartmentMinAggregateInputType
    _max?: UserDepartmentMaxAggregateInputType
  }

  export type UserDepartmentGroupByOutputType = {
    id: string
    userId: string
    departmentId: string
    _count: UserDepartmentCountAggregateOutputType | null
    _min: UserDepartmentMinAggregateOutputType | null
    _max: UserDepartmentMaxAggregateOutputType | null
  }

  type GetUserDepartmentGroupByPayload<T extends UserDepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserDepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], UserDepartmentGroupByOutputType[P]>
        }
      >
    >


  export type UserDepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDepartment"]>

  export type UserDepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDepartment"]>

  export type UserDepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDepartment"]>

  export type UserDepartmentSelectScalar = {
    id?: boolean
    userId?: boolean
    departmentId?: boolean
  }

  export type UserDepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "departmentId", ExtArgs["result"]["userDepartment"]>
  export type UserDepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type UserDepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type UserDepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $UserDepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserDepartment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      departmentId: string
    }, ExtArgs["result"]["userDepartment"]>
    composites: {}
  }

  type UserDepartmentGetPayload<S extends boolean | null | undefined | UserDepartmentDefaultArgs> = $Result.GetResult<Prisma.$UserDepartmentPayload, S>

  type UserDepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserDepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserDepartmentCountAggregateInputType | true
    }

  export interface UserDepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDepartment'], meta: { name: 'UserDepartment' } }
    /**
     * Find zero or one UserDepartment that matches the filter.
     * @param {UserDepartmentFindUniqueArgs} args - Arguments to find a UserDepartment
     * @example
     * // Get one UserDepartment
     * const userDepartment = await prisma.userDepartment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserDepartmentFindUniqueArgs>(args: SelectSubset<T, UserDepartmentFindUniqueArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserDepartment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserDepartmentFindUniqueOrThrowArgs} args - Arguments to find a UserDepartment
     * @example
     * // Get one UserDepartment
     * const userDepartment = await prisma.userDepartment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserDepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserDepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserDepartment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDepartmentFindFirstArgs} args - Arguments to find a UserDepartment
     * @example
     * // Get one UserDepartment
     * const userDepartment = await prisma.userDepartment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserDepartmentFindFirstArgs>(args?: SelectSubset<T, UserDepartmentFindFirstArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserDepartment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDepartmentFindFirstOrThrowArgs} args - Arguments to find a UserDepartment
     * @example
     * // Get one UserDepartment
     * const userDepartment = await prisma.userDepartment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserDepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserDepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserDepartments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDepartments
     * const userDepartments = await prisma.userDepartment.findMany()
     * 
     * // Get first 10 UserDepartments
     * const userDepartments = await prisma.userDepartment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDepartmentWithIdOnly = await prisma.userDepartment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserDepartmentFindManyArgs>(args?: SelectSubset<T, UserDepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserDepartment.
     * @param {UserDepartmentCreateArgs} args - Arguments to create a UserDepartment.
     * @example
     * // Create one UserDepartment
     * const UserDepartment = await prisma.userDepartment.create({
     *   data: {
     *     // ... data to create a UserDepartment
     *   }
     * })
     * 
     */
    create<T extends UserDepartmentCreateArgs>(args: SelectSubset<T, UserDepartmentCreateArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserDepartments.
     * @param {UserDepartmentCreateManyArgs} args - Arguments to create many UserDepartments.
     * @example
     * // Create many UserDepartments
     * const userDepartment = await prisma.userDepartment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserDepartmentCreateManyArgs>(args?: SelectSubset<T, UserDepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserDepartments and returns the data saved in the database.
     * @param {UserDepartmentCreateManyAndReturnArgs} args - Arguments to create many UserDepartments.
     * @example
     * // Create many UserDepartments
     * const userDepartment = await prisma.userDepartment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserDepartments and only return the `id`
     * const userDepartmentWithIdOnly = await prisma.userDepartment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserDepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, UserDepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserDepartment.
     * @param {UserDepartmentDeleteArgs} args - Arguments to delete one UserDepartment.
     * @example
     * // Delete one UserDepartment
     * const UserDepartment = await prisma.userDepartment.delete({
     *   where: {
     *     // ... filter to delete one UserDepartment
     *   }
     * })
     * 
     */
    delete<T extends UserDepartmentDeleteArgs>(args: SelectSubset<T, UserDepartmentDeleteArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserDepartment.
     * @param {UserDepartmentUpdateArgs} args - Arguments to update one UserDepartment.
     * @example
     * // Update one UserDepartment
     * const userDepartment = await prisma.userDepartment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserDepartmentUpdateArgs>(args: SelectSubset<T, UserDepartmentUpdateArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserDepartments.
     * @param {UserDepartmentDeleteManyArgs} args - Arguments to filter UserDepartments to delete.
     * @example
     * // Delete a few UserDepartments
     * const { count } = await prisma.userDepartment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDepartmentDeleteManyArgs>(args?: SelectSubset<T, UserDepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDepartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDepartments
     * const userDepartment = await prisma.userDepartment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserDepartmentUpdateManyArgs>(args: SelectSubset<T, UserDepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDepartments and returns the data updated in the database.
     * @param {UserDepartmentUpdateManyAndReturnArgs} args - Arguments to update many UserDepartments.
     * @example
     * // Update many UserDepartments
     * const userDepartment = await prisma.userDepartment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserDepartments and only return the `id`
     * const userDepartmentWithIdOnly = await prisma.userDepartment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserDepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, UserDepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserDepartment.
     * @param {UserDepartmentUpsertArgs} args - Arguments to update or create a UserDepartment.
     * @example
     * // Update or create a UserDepartment
     * const userDepartment = await prisma.userDepartment.upsert({
     *   create: {
     *     // ... data to create a UserDepartment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDepartment we want to update
     *   }
     * })
     */
    upsert<T extends UserDepartmentUpsertArgs>(args: SelectSubset<T, UserDepartmentUpsertArgs<ExtArgs>>): Prisma__UserDepartmentClient<$Result.GetResult<Prisma.$UserDepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserDepartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDepartmentCountArgs} args - Arguments to filter UserDepartments to count.
     * @example
     * // Count the number of UserDepartments
     * const count = await prisma.userDepartment.count({
     *   where: {
     *     // ... the filter for the UserDepartments we want to count
     *   }
     * })
    **/
    count<T extends UserDepartmentCountArgs>(
      args?: Subset<T, UserDepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDepartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDepartmentAggregateArgs>(args: Subset<T, UserDepartmentAggregateArgs>): Prisma.PrismaPromise<GetUserDepartmentAggregateType<T>>

    /**
     * Group by UserDepartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDepartmentGroupByArgs['orderBy'] }
        : { orderBy?: UserDepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserDepartment model
   */
  readonly fields: UserDepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDepartment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserDepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserDepartment model
   */
  interface UserDepartmentFieldRefs {
    readonly id: FieldRef<"UserDepartment", 'String'>
    readonly userId: FieldRef<"UserDepartment", 'String'>
    readonly departmentId: FieldRef<"UserDepartment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserDepartment findUnique
   */
  export type UserDepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which UserDepartment to fetch.
     */
    where: UserDepartmentWhereUniqueInput
  }

  /**
   * UserDepartment findUniqueOrThrow
   */
  export type UserDepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which UserDepartment to fetch.
     */
    where: UserDepartmentWhereUniqueInput
  }

  /**
   * UserDepartment findFirst
   */
  export type UserDepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which UserDepartment to fetch.
     */
    where?: UserDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDepartments to fetch.
     */
    orderBy?: UserDepartmentOrderByWithRelationInput | UserDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDepartments.
     */
    cursor?: UserDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDepartments.
     */
    distinct?: UserDepartmentScalarFieldEnum | UserDepartmentScalarFieldEnum[]
  }

  /**
   * UserDepartment findFirstOrThrow
   */
  export type UserDepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which UserDepartment to fetch.
     */
    where?: UserDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDepartments to fetch.
     */
    orderBy?: UserDepartmentOrderByWithRelationInput | UserDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDepartments.
     */
    cursor?: UserDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDepartments.
     */
    distinct?: UserDepartmentScalarFieldEnum | UserDepartmentScalarFieldEnum[]
  }

  /**
   * UserDepartment findMany
   */
  export type UserDepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which UserDepartments to fetch.
     */
    where?: UserDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDepartments to fetch.
     */
    orderBy?: UserDepartmentOrderByWithRelationInput | UserDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDepartments.
     */
    cursor?: UserDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDepartments.
     */
    skip?: number
    distinct?: UserDepartmentScalarFieldEnum | UserDepartmentScalarFieldEnum[]
  }

  /**
   * UserDepartment create
   */
  export type UserDepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDepartment.
     */
    data: XOR<UserDepartmentCreateInput, UserDepartmentUncheckedCreateInput>
  }

  /**
   * UserDepartment createMany
   */
  export type UserDepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDepartments.
     */
    data: UserDepartmentCreateManyInput | UserDepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserDepartment createManyAndReturn
   */
  export type UserDepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many UserDepartments.
     */
    data: UserDepartmentCreateManyInput | UserDepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDepartment update
   */
  export type UserDepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDepartment.
     */
    data: XOR<UserDepartmentUpdateInput, UserDepartmentUncheckedUpdateInput>
    /**
     * Choose, which UserDepartment to update.
     */
    where: UserDepartmentWhereUniqueInput
  }

  /**
   * UserDepartment updateMany
   */
  export type UserDepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDepartments.
     */
    data: XOR<UserDepartmentUpdateManyMutationInput, UserDepartmentUncheckedUpdateManyInput>
    /**
     * Filter which UserDepartments to update
     */
    where?: UserDepartmentWhereInput
    /**
     * Limit how many UserDepartments to update.
     */
    limit?: number
  }

  /**
   * UserDepartment updateManyAndReturn
   */
  export type UserDepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * The data used to update UserDepartments.
     */
    data: XOR<UserDepartmentUpdateManyMutationInput, UserDepartmentUncheckedUpdateManyInput>
    /**
     * Filter which UserDepartments to update
     */
    where?: UserDepartmentWhereInput
    /**
     * Limit how many UserDepartments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDepartment upsert
   */
  export type UserDepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDepartment to update in case it exists.
     */
    where: UserDepartmentWhereUniqueInput
    /**
     * In case the UserDepartment found by the `where` argument doesn't exist, create a new UserDepartment with this data.
     */
    create: XOR<UserDepartmentCreateInput, UserDepartmentUncheckedCreateInput>
    /**
     * In case the UserDepartment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDepartmentUpdateInput, UserDepartmentUncheckedUpdateInput>
  }

  /**
   * UserDepartment delete
   */
  export type UserDepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
    /**
     * Filter which UserDepartment to delete.
     */
    where: UserDepartmentWhereUniqueInput
  }

  /**
   * UserDepartment deleteMany
   */
  export type UserDepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDepartments to delete
     */
    where?: UserDepartmentWhereInput
    /**
     * Limit how many UserDepartments to delete.
     */
    limit?: number
  }

  /**
   * UserDepartment without action
   */
  export type UserDepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDepartment
     */
    select?: UserDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDepartment
     */
    omit?: UserDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDepartmentInclude<ExtArgs> | null
  }


  /**
   * Model GroupKeyShare
   */

  export type AggregateGroupKeyShare = {
    _count: GroupKeyShareCountAggregateOutputType | null
    _min: GroupKeyShareMinAggregateOutputType | null
    _max: GroupKeyShareMaxAggregateOutputType | null
  }

  export type GroupKeyShareMinAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
    encryptedKey: string | null
  }

  export type GroupKeyShareMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
    encryptedKey: string | null
  }

  export type GroupKeyShareCountAggregateOutputType = {
    id: number
    userId: number
    departmentId: number
    encryptedKey: number
    _all: number
  }


  export type GroupKeyShareMinAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    encryptedKey?: true
  }

  export type GroupKeyShareMaxAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    encryptedKey?: true
  }

  export type GroupKeyShareCountAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    encryptedKey?: true
    _all?: true
  }

  export type GroupKeyShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupKeyShare to aggregate.
     */
    where?: GroupKeyShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupKeyShares to fetch.
     */
    orderBy?: GroupKeyShareOrderByWithRelationInput | GroupKeyShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupKeyShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupKeyShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupKeyShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupKeyShares
    **/
    _count?: true | GroupKeyShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupKeyShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupKeyShareMaxAggregateInputType
  }

  export type GetGroupKeyShareAggregateType<T extends GroupKeyShareAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupKeyShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupKeyShare[P]>
      : GetScalarType<T[P], AggregateGroupKeyShare[P]>
  }




  export type GroupKeyShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupKeyShareWhereInput
    orderBy?: GroupKeyShareOrderByWithAggregationInput | GroupKeyShareOrderByWithAggregationInput[]
    by: GroupKeyShareScalarFieldEnum[] | GroupKeyShareScalarFieldEnum
    having?: GroupKeyShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupKeyShareCountAggregateInputType | true
    _min?: GroupKeyShareMinAggregateInputType
    _max?: GroupKeyShareMaxAggregateInputType
  }

  export type GroupKeyShareGroupByOutputType = {
    id: string
    userId: string
    departmentId: string
    encryptedKey: string
    _count: GroupKeyShareCountAggregateOutputType | null
    _min: GroupKeyShareMinAggregateOutputType | null
    _max: GroupKeyShareMaxAggregateOutputType | null
  }

  type GetGroupKeyShareGroupByPayload<T extends GroupKeyShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupKeyShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupKeyShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupKeyShareGroupByOutputType[P]>
            : GetScalarType<T[P], GroupKeyShareGroupByOutputType[P]>
        }
      >
    >


  export type GroupKeyShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    encryptedKey?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupKeyShare"]>

  export type GroupKeyShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    encryptedKey?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupKeyShare"]>

  export type GroupKeyShareSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    encryptedKey?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupKeyShare"]>

  export type GroupKeyShareSelectScalar = {
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    encryptedKey?: boolean
  }

  export type GroupKeyShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "departmentId" | "encryptedKey", ExtArgs["result"]["groupKeyShare"]>
  export type GroupKeyShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type GroupKeyShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type GroupKeyShareIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $GroupKeySharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupKeyShare"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      departmentId: string
      encryptedKey: string
    }, ExtArgs["result"]["groupKeyShare"]>
    composites: {}
  }

  type GroupKeyShareGetPayload<S extends boolean | null | undefined | GroupKeyShareDefaultArgs> = $Result.GetResult<Prisma.$GroupKeySharePayload, S>

  type GroupKeyShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupKeyShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupKeyShareCountAggregateInputType | true
    }

  export interface GroupKeyShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupKeyShare'], meta: { name: 'GroupKeyShare' } }
    /**
     * Find zero or one GroupKeyShare that matches the filter.
     * @param {GroupKeyShareFindUniqueArgs} args - Arguments to find a GroupKeyShare
     * @example
     * // Get one GroupKeyShare
     * const groupKeyShare = await prisma.groupKeyShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupKeyShareFindUniqueArgs>(args: SelectSubset<T, GroupKeyShareFindUniqueArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupKeyShare that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupKeyShareFindUniqueOrThrowArgs} args - Arguments to find a GroupKeyShare
     * @example
     * // Get one GroupKeyShare
     * const groupKeyShare = await prisma.groupKeyShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupKeyShareFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupKeyShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupKeyShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupKeyShareFindFirstArgs} args - Arguments to find a GroupKeyShare
     * @example
     * // Get one GroupKeyShare
     * const groupKeyShare = await prisma.groupKeyShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupKeyShareFindFirstArgs>(args?: SelectSubset<T, GroupKeyShareFindFirstArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupKeyShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupKeyShareFindFirstOrThrowArgs} args - Arguments to find a GroupKeyShare
     * @example
     * // Get one GroupKeyShare
     * const groupKeyShare = await prisma.groupKeyShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupKeyShareFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupKeyShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupKeyShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupKeyShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupKeyShares
     * const groupKeyShares = await prisma.groupKeyShare.findMany()
     * 
     * // Get first 10 GroupKeyShares
     * const groupKeyShares = await prisma.groupKeyShare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupKeyShareWithIdOnly = await prisma.groupKeyShare.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupKeyShareFindManyArgs>(args?: SelectSubset<T, GroupKeyShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupKeyShare.
     * @param {GroupKeyShareCreateArgs} args - Arguments to create a GroupKeyShare.
     * @example
     * // Create one GroupKeyShare
     * const GroupKeyShare = await prisma.groupKeyShare.create({
     *   data: {
     *     // ... data to create a GroupKeyShare
     *   }
     * })
     * 
     */
    create<T extends GroupKeyShareCreateArgs>(args: SelectSubset<T, GroupKeyShareCreateArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupKeyShares.
     * @param {GroupKeyShareCreateManyArgs} args - Arguments to create many GroupKeyShares.
     * @example
     * // Create many GroupKeyShares
     * const groupKeyShare = await prisma.groupKeyShare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupKeyShareCreateManyArgs>(args?: SelectSubset<T, GroupKeyShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupKeyShares and returns the data saved in the database.
     * @param {GroupKeyShareCreateManyAndReturnArgs} args - Arguments to create many GroupKeyShares.
     * @example
     * // Create many GroupKeyShares
     * const groupKeyShare = await prisma.groupKeyShare.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupKeyShares and only return the `id`
     * const groupKeyShareWithIdOnly = await prisma.groupKeyShare.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupKeyShareCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupKeyShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupKeyShare.
     * @param {GroupKeyShareDeleteArgs} args - Arguments to delete one GroupKeyShare.
     * @example
     * // Delete one GroupKeyShare
     * const GroupKeyShare = await prisma.groupKeyShare.delete({
     *   where: {
     *     // ... filter to delete one GroupKeyShare
     *   }
     * })
     * 
     */
    delete<T extends GroupKeyShareDeleteArgs>(args: SelectSubset<T, GroupKeyShareDeleteArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupKeyShare.
     * @param {GroupKeyShareUpdateArgs} args - Arguments to update one GroupKeyShare.
     * @example
     * // Update one GroupKeyShare
     * const groupKeyShare = await prisma.groupKeyShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupKeyShareUpdateArgs>(args: SelectSubset<T, GroupKeyShareUpdateArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupKeyShares.
     * @param {GroupKeyShareDeleteManyArgs} args - Arguments to filter GroupKeyShares to delete.
     * @example
     * // Delete a few GroupKeyShares
     * const { count } = await prisma.groupKeyShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupKeyShareDeleteManyArgs>(args?: SelectSubset<T, GroupKeyShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupKeyShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupKeyShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupKeyShares
     * const groupKeyShare = await prisma.groupKeyShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupKeyShareUpdateManyArgs>(args: SelectSubset<T, GroupKeyShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupKeyShares and returns the data updated in the database.
     * @param {GroupKeyShareUpdateManyAndReturnArgs} args - Arguments to update many GroupKeyShares.
     * @example
     * // Update many GroupKeyShares
     * const groupKeyShare = await prisma.groupKeyShare.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupKeyShares and only return the `id`
     * const groupKeyShareWithIdOnly = await prisma.groupKeyShare.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupKeyShareUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupKeyShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupKeyShare.
     * @param {GroupKeyShareUpsertArgs} args - Arguments to update or create a GroupKeyShare.
     * @example
     * // Update or create a GroupKeyShare
     * const groupKeyShare = await prisma.groupKeyShare.upsert({
     *   create: {
     *     // ... data to create a GroupKeyShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupKeyShare we want to update
     *   }
     * })
     */
    upsert<T extends GroupKeyShareUpsertArgs>(args: SelectSubset<T, GroupKeyShareUpsertArgs<ExtArgs>>): Prisma__GroupKeyShareClient<$Result.GetResult<Prisma.$GroupKeySharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupKeyShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupKeyShareCountArgs} args - Arguments to filter GroupKeyShares to count.
     * @example
     * // Count the number of GroupKeyShares
     * const count = await prisma.groupKeyShare.count({
     *   where: {
     *     // ... the filter for the GroupKeyShares we want to count
     *   }
     * })
    **/
    count<T extends GroupKeyShareCountArgs>(
      args?: Subset<T, GroupKeyShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupKeyShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupKeyShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupKeyShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupKeyShareAggregateArgs>(args: Subset<T, GroupKeyShareAggregateArgs>): Prisma.PrismaPromise<GetGroupKeyShareAggregateType<T>>

    /**
     * Group by GroupKeyShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupKeyShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupKeyShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupKeyShareGroupByArgs['orderBy'] }
        : { orderBy?: GroupKeyShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupKeyShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupKeyShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupKeyShare model
   */
  readonly fields: GroupKeyShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupKeyShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupKeyShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupKeyShare model
   */
  interface GroupKeyShareFieldRefs {
    readonly id: FieldRef<"GroupKeyShare", 'String'>
    readonly userId: FieldRef<"GroupKeyShare", 'String'>
    readonly departmentId: FieldRef<"GroupKeyShare", 'String'>
    readonly encryptedKey: FieldRef<"GroupKeyShare", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GroupKeyShare findUnique
   */
  export type GroupKeyShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * Filter, which GroupKeyShare to fetch.
     */
    where: GroupKeyShareWhereUniqueInput
  }

  /**
   * GroupKeyShare findUniqueOrThrow
   */
  export type GroupKeyShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * Filter, which GroupKeyShare to fetch.
     */
    where: GroupKeyShareWhereUniqueInput
  }

  /**
   * GroupKeyShare findFirst
   */
  export type GroupKeyShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * Filter, which GroupKeyShare to fetch.
     */
    where?: GroupKeyShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupKeyShares to fetch.
     */
    orderBy?: GroupKeyShareOrderByWithRelationInput | GroupKeyShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupKeyShares.
     */
    cursor?: GroupKeyShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupKeyShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupKeyShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupKeyShares.
     */
    distinct?: GroupKeyShareScalarFieldEnum | GroupKeyShareScalarFieldEnum[]
  }

  /**
   * GroupKeyShare findFirstOrThrow
   */
  export type GroupKeyShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * Filter, which GroupKeyShare to fetch.
     */
    where?: GroupKeyShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupKeyShares to fetch.
     */
    orderBy?: GroupKeyShareOrderByWithRelationInput | GroupKeyShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupKeyShares.
     */
    cursor?: GroupKeyShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupKeyShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupKeyShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupKeyShares.
     */
    distinct?: GroupKeyShareScalarFieldEnum | GroupKeyShareScalarFieldEnum[]
  }

  /**
   * GroupKeyShare findMany
   */
  export type GroupKeyShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * Filter, which GroupKeyShares to fetch.
     */
    where?: GroupKeyShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupKeyShares to fetch.
     */
    orderBy?: GroupKeyShareOrderByWithRelationInput | GroupKeyShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupKeyShares.
     */
    cursor?: GroupKeyShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupKeyShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupKeyShares.
     */
    skip?: number
    distinct?: GroupKeyShareScalarFieldEnum | GroupKeyShareScalarFieldEnum[]
  }

  /**
   * GroupKeyShare create
   */
  export type GroupKeyShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupKeyShare.
     */
    data: XOR<GroupKeyShareCreateInput, GroupKeyShareUncheckedCreateInput>
  }

  /**
   * GroupKeyShare createMany
   */
  export type GroupKeyShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupKeyShares.
     */
    data: GroupKeyShareCreateManyInput | GroupKeyShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupKeyShare createManyAndReturn
   */
  export type GroupKeyShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * The data used to create many GroupKeyShares.
     */
    data: GroupKeyShareCreateManyInput | GroupKeyShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupKeyShare update
   */
  export type GroupKeyShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupKeyShare.
     */
    data: XOR<GroupKeyShareUpdateInput, GroupKeyShareUncheckedUpdateInput>
    /**
     * Choose, which GroupKeyShare to update.
     */
    where: GroupKeyShareWhereUniqueInput
  }

  /**
   * GroupKeyShare updateMany
   */
  export type GroupKeyShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupKeyShares.
     */
    data: XOR<GroupKeyShareUpdateManyMutationInput, GroupKeyShareUncheckedUpdateManyInput>
    /**
     * Filter which GroupKeyShares to update
     */
    where?: GroupKeyShareWhereInput
    /**
     * Limit how many GroupKeyShares to update.
     */
    limit?: number
  }

  /**
   * GroupKeyShare updateManyAndReturn
   */
  export type GroupKeyShareUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * The data used to update GroupKeyShares.
     */
    data: XOR<GroupKeyShareUpdateManyMutationInput, GroupKeyShareUncheckedUpdateManyInput>
    /**
     * Filter which GroupKeyShares to update
     */
    where?: GroupKeyShareWhereInput
    /**
     * Limit how many GroupKeyShares to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupKeyShare upsert
   */
  export type GroupKeyShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupKeyShare to update in case it exists.
     */
    where: GroupKeyShareWhereUniqueInput
    /**
     * In case the GroupKeyShare found by the `where` argument doesn't exist, create a new GroupKeyShare with this data.
     */
    create: XOR<GroupKeyShareCreateInput, GroupKeyShareUncheckedCreateInput>
    /**
     * In case the GroupKeyShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupKeyShareUpdateInput, GroupKeyShareUncheckedUpdateInput>
  }

  /**
   * GroupKeyShare delete
   */
  export type GroupKeyShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
    /**
     * Filter which GroupKeyShare to delete.
     */
    where: GroupKeyShareWhereUniqueInput
  }

  /**
   * GroupKeyShare deleteMany
   */
  export type GroupKeyShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupKeyShares to delete
     */
    where?: GroupKeyShareWhereInput
    /**
     * Limit how many GroupKeyShares to delete.
     */
    limit?: number
  }

  /**
   * GroupKeyShare without action
   */
  export type GroupKeyShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupKeyShare
     */
    select?: GroupKeyShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupKeyShare
     */
    omit?: GroupKeyShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupKeyShareInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    departmentId: string | null
    encryptedContent: string | null
    isBroadcast: boolean | null
    fileUrl: string | null
    sentAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    departmentId: string | null
    encryptedContent: string | null
    isBroadcast: boolean | null
    fileUrl: string | null
    sentAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    departmentId: number
    encryptedContent: number
    isBroadcast: number
    fileUrl: number
    sentAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    departmentId?: true
    encryptedContent?: true
    isBroadcast?: true
    fileUrl?: true
    sentAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    departmentId?: true
    encryptedContent?: true
    isBroadcast?: true
    fileUrl?: true
    sentAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    departmentId?: true
    encryptedContent?: true
    isBroadcast?: true
    fileUrl?: true
    sentAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    senderId: string
    receiverId: string | null
    departmentId: string | null
    encryptedContent: string
    isBroadcast: boolean
    fileUrl: string | null
    sentAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    departmentId?: boolean
    encryptedContent?: boolean
    isBroadcast?: boolean
    fileUrl?: boolean
    sentAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Message$receiverArgs<ExtArgs>
    department?: boolean | Message$departmentArgs<ExtArgs>
    encryptedAESKeys?: boolean | Message$encryptedAESKeysArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    departmentId?: boolean
    encryptedContent?: boolean
    isBroadcast?: boolean
    fileUrl?: boolean
    sentAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Message$receiverArgs<ExtArgs>
    department?: boolean | Message$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    departmentId?: boolean
    encryptedContent?: boolean
    isBroadcast?: boolean
    fileUrl?: boolean
    sentAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Message$receiverArgs<ExtArgs>
    department?: boolean | Message$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    departmentId?: boolean
    encryptedContent?: boolean
    isBroadcast?: boolean
    fileUrl?: boolean
    sentAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "receiverId" | "departmentId" | "encryptedContent" | "isBroadcast" | "fileUrl" | "sentAt", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Message$receiverArgs<ExtArgs>
    department?: boolean | Message$departmentArgs<ExtArgs>
    encryptedAESKeys?: boolean | Message$encryptedAESKeysArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Message$receiverArgs<ExtArgs>
    department?: boolean | Message$departmentArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Message$receiverArgs<ExtArgs>
    department?: boolean | Message$departmentArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      encryptedAESKeys: Prisma.$EncryptedAESKeyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      receiverId: string | null
      departmentId: string | null
      encryptedContent: string
      isBroadcast: boolean
      fileUrl: string | null
      sentAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends Message$receiverArgs<ExtArgs> = {}>(args?: Subset<T, Message$receiverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends Message$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Message$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    encryptedAESKeys<T extends Message$encryptedAESKeysArgs<ExtArgs> = {}>(args?: Subset<T, Message$encryptedAESKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly receiverId: FieldRef<"Message", 'String'>
    readonly departmentId: FieldRef<"Message", 'String'>
    readonly encryptedContent: FieldRef<"Message", 'String'>
    readonly isBroadcast: FieldRef<"Message", 'Boolean'>
    readonly fileUrl: FieldRef<"Message", 'String'>
    readonly sentAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message.receiver
   */
  export type Message$receiverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Message.department
   */
  export type Message$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Message.encryptedAESKeys
   */
  export type Message$encryptedAESKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    where?: EncryptedAESKeyWhereInput
    orderBy?: EncryptedAESKeyOrderByWithRelationInput | EncryptedAESKeyOrderByWithRelationInput[]
    cursor?: EncryptedAESKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EncryptedAESKeyScalarFieldEnum | EncryptedAESKeyScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model EncryptedAESKey
   */

  export type AggregateEncryptedAESKey = {
    _count: EncryptedAESKeyCountAggregateOutputType | null
    _min: EncryptedAESKeyMinAggregateOutputType | null
    _max: EncryptedAESKeyMaxAggregateOutputType | null
  }

  export type EncryptedAESKeyMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    aesKey: string | null
  }

  export type EncryptedAESKeyMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    aesKey: string | null
  }

  export type EncryptedAESKeyCountAggregateOutputType = {
    id: number
    messageId: number
    userId: number
    aesKey: number
    _all: number
  }


  export type EncryptedAESKeyMinAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    aesKey?: true
  }

  export type EncryptedAESKeyMaxAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    aesKey?: true
  }

  export type EncryptedAESKeyCountAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    aesKey?: true
    _all?: true
  }

  export type EncryptedAESKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EncryptedAESKey to aggregate.
     */
    where?: EncryptedAESKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptedAESKeys to fetch.
     */
    orderBy?: EncryptedAESKeyOrderByWithRelationInput | EncryptedAESKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EncryptedAESKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptedAESKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptedAESKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EncryptedAESKeys
    **/
    _count?: true | EncryptedAESKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EncryptedAESKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EncryptedAESKeyMaxAggregateInputType
  }

  export type GetEncryptedAESKeyAggregateType<T extends EncryptedAESKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateEncryptedAESKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEncryptedAESKey[P]>
      : GetScalarType<T[P], AggregateEncryptedAESKey[P]>
  }




  export type EncryptedAESKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EncryptedAESKeyWhereInput
    orderBy?: EncryptedAESKeyOrderByWithAggregationInput | EncryptedAESKeyOrderByWithAggregationInput[]
    by: EncryptedAESKeyScalarFieldEnum[] | EncryptedAESKeyScalarFieldEnum
    having?: EncryptedAESKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EncryptedAESKeyCountAggregateInputType | true
    _min?: EncryptedAESKeyMinAggregateInputType
    _max?: EncryptedAESKeyMaxAggregateInputType
  }

  export type EncryptedAESKeyGroupByOutputType = {
    id: string
    messageId: string
    userId: string
    aesKey: string
    _count: EncryptedAESKeyCountAggregateOutputType | null
    _min: EncryptedAESKeyMinAggregateOutputType | null
    _max: EncryptedAESKeyMaxAggregateOutputType | null
  }

  type GetEncryptedAESKeyGroupByPayload<T extends EncryptedAESKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EncryptedAESKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EncryptedAESKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EncryptedAESKeyGroupByOutputType[P]>
            : GetScalarType<T[P], EncryptedAESKeyGroupByOutputType[P]>
        }
      >
    >


  export type EncryptedAESKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    aesKey?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["encryptedAESKey"]>

  export type EncryptedAESKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    aesKey?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["encryptedAESKey"]>

  export type EncryptedAESKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    aesKey?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["encryptedAESKey"]>

  export type EncryptedAESKeySelectScalar = {
    id?: boolean
    messageId?: boolean
    userId?: boolean
    aesKey?: boolean
  }

  export type EncryptedAESKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "userId" | "aesKey", ExtArgs["result"]["encryptedAESKey"]>
  export type EncryptedAESKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EncryptedAESKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EncryptedAESKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EncryptedAESKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EncryptedAESKey"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      userId: string
      aesKey: string
    }, ExtArgs["result"]["encryptedAESKey"]>
    composites: {}
  }

  type EncryptedAESKeyGetPayload<S extends boolean | null | undefined | EncryptedAESKeyDefaultArgs> = $Result.GetResult<Prisma.$EncryptedAESKeyPayload, S>

  type EncryptedAESKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EncryptedAESKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EncryptedAESKeyCountAggregateInputType | true
    }

  export interface EncryptedAESKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EncryptedAESKey'], meta: { name: 'EncryptedAESKey' } }
    /**
     * Find zero or one EncryptedAESKey that matches the filter.
     * @param {EncryptedAESKeyFindUniqueArgs} args - Arguments to find a EncryptedAESKey
     * @example
     * // Get one EncryptedAESKey
     * const encryptedAESKey = await prisma.encryptedAESKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EncryptedAESKeyFindUniqueArgs>(args: SelectSubset<T, EncryptedAESKeyFindUniqueArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EncryptedAESKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EncryptedAESKeyFindUniqueOrThrowArgs} args - Arguments to find a EncryptedAESKey
     * @example
     * // Get one EncryptedAESKey
     * const encryptedAESKey = await prisma.encryptedAESKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EncryptedAESKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, EncryptedAESKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EncryptedAESKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptedAESKeyFindFirstArgs} args - Arguments to find a EncryptedAESKey
     * @example
     * // Get one EncryptedAESKey
     * const encryptedAESKey = await prisma.encryptedAESKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EncryptedAESKeyFindFirstArgs>(args?: SelectSubset<T, EncryptedAESKeyFindFirstArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EncryptedAESKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptedAESKeyFindFirstOrThrowArgs} args - Arguments to find a EncryptedAESKey
     * @example
     * // Get one EncryptedAESKey
     * const encryptedAESKey = await prisma.encryptedAESKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EncryptedAESKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, EncryptedAESKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EncryptedAESKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptedAESKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EncryptedAESKeys
     * const encryptedAESKeys = await prisma.encryptedAESKey.findMany()
     * 
     * // Get first 10 EncryptedAESKeys
     * const encryptedAESKeys = await prisma.encryptedAESKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const encryptedAESKeyWithIdOnly = await prisma.encryptedAESKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EncryptedAESKeyFindManyArgs>(args?: SelectSubset<T, EncryptedAESKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EncryptedAESKey.
     * @param {EncryptedAESKeyCreateArgs} args - Arguments to create a EncryptedAESKey.
     * @example
     * // Create one EncryptedAESKey
     * const EncryptedAESKey = await prisma.encryptedAESKey.create({
     *   data: {
     *     // ... data to create a EncryptedAESKey
     *   }
     * })
     * 
     */
    create<T extends EncryptedAESKeyCreateArgs>(args: SelectSubset<T, EncryptedAESKeyCreateArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EncryptedAESKeys.
     * @param {EncryptedAESKeyCreateManyArgs} args - Arguments to create many EncryptedAESKeys.
     * @example
     * // Create many EncryptedAESKeys
     * const encryptedAESKey = await prisma.encryptedAESKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EncryptedAESKeyCreateManyArgs>(args?: SelectSubset<T, EncryptedAESKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EncryptedAESKeys and returns the data saved in the database.
     * @param {EncryptedAESKeyCreateManyAndReturnArgs} args - Arguments to create many EncryptedAESKeys.
     * @example
     * // Create many EncryptedAESKeys
     * const encryptedAESKey = await prisma.encryptedAESKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EncryptedAESKeys and only return the `id`
     * const encryptedAESKeyWithIdOnly = await prisma.encryptedAESKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EncryptedAESKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, EncryptedAESKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EncryptedAESKey.
     * @param {EncryptedAESKeyDeleteArgs} args - Arguments to delete one EncryptedAESKey.
     * @example
     * // Delete one EncryptedAESKey
     * const EncryptedAESKey = await prisma.encryptedAESKey.delete({
     *   where: {
     *     // ... filter to delete one EncryptedAESKey
     *   }
     * })
     * 
     */
    delete<T extends EncryptedAESKeyDeleteArgs>(args: SelectSubset<T, EncryptedAESKeyDeleteArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EncryptedAESKey.
     * @param {EncryptedAESKeyUpdateArgs} args - Arguments to update one EncryptedAESKey.
     * @example
     * // Update one EncryptedAESKey
     * const encryptedAESKey = await prisma.encryptedAESKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EncryptedAESKeyUpdateArgs>(args: SelectSubset<T, EncryptedAESKeyUpdateArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EncryptedAESKeys.
     * @param {EncryptedAESKeyDeleteManyArgs} args - Arguments to filter EncryptedAESKeys to delete.
     * @example
     * // Delete a few EncryptedAESKeys
     * const { count } = await prisma.encryptedAESKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EncryptedAESKeyDeleteManyArgs>(args?: SelectSubset<T, EncryptedAESKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EncryptedAESKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptedAESKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EncryptedAESKeys
     * const encryptedAESKey = await prisma.encryptedAESKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EncryptedAESKeyUpdateManyArgs>(args: SelectSubset<T, EncryptedAESKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EncryptedAESKeys and returns the data updated in the database.
     * @param {EncryptedAESKeyUpdateManyAndReturnArgs} args - Arguments to update many EncryptedAESKeys.
     * @example
     * // Update many EncryptedAESKeys
     * const encryptedAESKey = await prisma.encryptedAESKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EncryptedAESKeys and only return the `id`
     * const encryptedAESKeyWithIdOnly = await prisma.encryptedAESKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EncryptedAESKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, EncryptedAESKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EncryptedAESKey.
     * @param {EncryptedAESKeyUpsertArgs} args - Arguments to update or create a EncryptedAESKey.
     * @example
     * // Update or create a EncryptedAESKey
     * const encryptedAESKey = await prisma.encryptedAESKey.upsert({
     *   create: {
     *     // ... data to create a EncryptedAESKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EncryptedAESKey we want to update
     *   }
     * })
     */
    upsert<T extends EncryptedAESKeyUpsertArgs>(args: SelectSubset<T, EncryptedAESKeyUpsertArgs<ExtArgs>>): Prisma__EncryptedAESKeyClient<$Result.GetResult<Prisma.$EncryptedAESKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EncryptedAESKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptedAESKeyCountArgs} args - Arguments to filter EncryptedAESKeys to count.
     * @example
     * // Count the number of EncryptedAESKeys
     * const count = await prisma.encryptedAESKey.count({
     *   where: {
     *     // ... the filter for the EncryptedAESKeys we want to count
     *   }
     * })
    **/
    count<T extends EncryptedAESKeyCountArgs>(
      args?: Subset<T, EncryptedAESKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EncryptedAESKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EncryptedAESKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptedAESKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EncryptedAESKeyAggregateArgs>(args: Subset<T, EncryptedAESKeyAggregateArgs>): Prisma.PrismaPromise<GetEncryptedAESKeyAggregateType<T>>

    /**
     * Group by EncryptedAESKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptedAESKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EncryptedAESKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EncryptedAESKeyGroupByArgs['orderBy'] }
        : { orderBy?: EncryptedAESKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EncryptedAESKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEncryptedAESKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EncryptedAESKey model
   */
  readonly fields: EncryptedAESKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EncryptedAESKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EncryptedAESKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EncryptedAESKey model
   */
  interface EncryptedAESKeyFieldRefs {
    readonly id: FieldRef<"EncryptedAESKey", 'String'>
    readonly messageId: FieldRef<"EncryptedAESKey", 'String'>
    readonly userId: FieldRef<"EncryptedAESKey", 'String'>
    readonly aesKey: FieldRef<"EncryptedAESKey", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EncryptedAESKey findUnique
   */
  export type EncryptedAESKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptedAESKey to fetch.
     */
    where: EncryptedAESKeyWhereUniqueInput
  }

  /**
   * EncryptedAESKey findUniqueOrThrow
   */
  export type EncryptedAESKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptedAESKey to fetch.
     */
    where: EncryptedAESKeyWhereUniqueInput
  }

  /**
   * EncryptedAESKey findFirst
   */
  export type EncryptedAESKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptedAESKey to fetch.
     */
    where?: EncryptedAESKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptedAESKeys to fetch.
     */
    orderBy?: EncryptedAESKeyOrderByWithRelationInput | EncryptedAESKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EncryptedAESKeys.
     */
    cursor?: EncryptedAESKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptedAESKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptedAESKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EncryptedAESKeys.
     */
    distinct?: EncryptedAESKeyScalarFieldEnum | EncryptedAESKeyScalarFieldEnum[]
  }

  /**
   * EncryptedAESKey findFirstOrThrow
   */
  export type EncryptedAESKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptedAESKey to fetch.
     */
    where?: EncryptedAESKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptedAESKeys to fetch.
     */
    orderBy?: EncryptedAESKeyOrderByWithRelationInput | EncryptedAESKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EncryptedAESKeys.
     */
    cursor?: EncryptedAESKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptedAESKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptedAESKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EncryptedAESKeys.
     */
    distinct?: EncryptedAESKeyScalarFieldEnum | EncryptedAESKeyScalarFieldEnum[]
  }

  /**
   * EncryptedAESKey findMany
   */
  export type EncryptedAESKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptedAESKeys to fetch.
     */
    where?: EncryptedAESKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptedAESKeys to fetch.
     */
    orderBy?: EncryptedAESKeyOrderByWithRelationInput | EncryptedAESKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EncryptedAESKeys.
     */
    cursor?: EncryptedAESKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptedAESKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptedAESKeys.
     */
    skip?: number
    distinct?: EncryptedAESKeyScalarFieldEnum | EncryptedAESKeyScalarFieldEnum[]
  }

  /**
   * EncryptedAESKey create
   */
  export type EncryptedAESKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a EncryptedAESKey.
     */
    data: XOR<EncryptedAESKeyCreateInput, EncryptedAESKeyUncheckedCreateInput>
  }

  /**
   * EncryptedAESKey createMany
   */
  export type EncryptedAESKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EncryptedAESKeys.
     */
    data: EncryptedAESKeyCreateManyInput | EncryptedAESKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EncryptedAESKey createManyAndReturn
   */
  export type EncryptedAESKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * The data used to create many EncryptedAESKeys.
     */
    data: EncryptedAESKeyCreateManyInput | EncryptedAESKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EncryptedAESKey update
   */
  export type EncryptedAESKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a EncryptedAESKey.
     */
    data: XOR<EncryptedAESKeyUpdateInput, EncryptedAESKeyUncheckedUpdateInput>
    /**
     * Choose, which EncryptedAESKey to update.
     */
    where: EncryptedAESKeyWhereUniqueInput
  }

  /**
   * EncryptedAESKey updateMany
   */
  export type EncryptedAESKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EncryptedAESKeys.
     */
    data: XOR<EncryptedAESKeyUpdateManyMutationInput, EncryptedAESKeyUncheckedUpdateManyInput>
    /**
     * Filter which EncryptedAESKeys to update
     */
    where?: EncryptedAESKeyWhereInput
    /**
     * Limit how many EncryptedAESKeys to update.
     */
    limit?: number
  }

  /**
   * EncryptedAESKey updateManyAndReturn
   */
  export type EncryptedAESKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * The data used to update EncryptedAESKeys.
     */
    data: XOR<EncryptedAESKeyUpdateManyMutationInput, EncryptedAESKeyUncheckedUpdateManyInput>
    /**
     * Filter which EncryptedAESKeys to update
     */
    where?: EncryptedAESKeyWhereInput
    /**
     * Limit how many EncryptedAESKeys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EncryptedAESKey upsert
   */
  export type EncryptedAESKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the EncryptedAESKey to update in case it exists.
     */
    where: EncryptedAESKeyWhereUniqueInput
    /**
     * In case the EncryptedAESKey found by the `where` argument doesn't exist, create a new EncryptedAESKey with this data.
     */
    create: XOR<EncryptedAESKeyCreateInput, EncryptedAESKeyUncheckedCreateInput>
    /**
     * In case the EncryptedAESKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EncryptedAESKeyUpdateInput, EncryptedAESKeyUncheckedUpdateInput>
  }

  /**
   * EncryptedAESKey delete
   */
  export type EncryptedAESKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
    /**
     * Filter which EncryptedAESKey to delete.
     */
    where: EncryptedAESKeyWhereUniqueInput
  }

  /**
   * EncryptedAESKey deleteMany
   */
  export type EncryptedAESKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EncryptedAESKeys to delete
     */
    where?: EncryptedAESKeyWhereInput
    /**
     * Limit how many EncryptedAESKeys to delete.
     */
    limit?: number
  }

  /**
   * EncryptedAESKey without action
   */
  export type EncryptedAESKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptedAESKey
     */
    select?: EncryptedAESKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptedAESKey
     */
    omit?: EncryptedAESKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptedAESKeyInclude<ExtArgs> | null
  }


  /**
   * Model LoginLog
   */

  export type AggregateLoginLog = {
    _count: LoginLogCountAggregateOutputType | null
    _min: LoginLogMinAggregateOutputType | null
    _max: LoginLogMaxAggregateOutputType | null
  }

  export type LoginLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: $Enums.Action | null
    timestamp: Date | null
  }

  export type LoginLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: $Enums.Action | null
    timestamp: Date | null
  }

  export type LoginLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    timestamp: number
    _all: number
  }


  export type LoginLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    timestamp?: true
  }

  export type LoginLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    timestamp?: true
  }

  export type LoginLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    timestamp?: true
    _all?: true
  }

  export type LoginLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginLog to aggregate.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoginLogs
    **/
    _count?: true | LoginLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoginLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoginLogMaxAggregateInputType
  }

  export type GetLoginLogAggregateType<T extends LoginLogAggregateArgs> = {
        [P in keyof T & keyof AggregateLoginLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoginLog[P]>
      : GetScalarType<T[P], AggregateLoginLog[P]>
  }




  export type LoginLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginLogWhereInput
    orderBy?: LoginLogOrderByWithAggregationInput | LoginLogOrderByWithAggregationInput[]
    by: LoginLogScalarFieldEnum[] | LoginLogScalarFieldEnum
    having?: LoginLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoginLogCountAggregateInputType | true
    _min?: LoginLogMinAggregateInputType
    _max?: LoginLogMaxAggregateInputType
  }

  export type LoginLogGroupByOutputType = {
    id: string
    userId: string
    action: $Enums.Action
    timestamp: Date
    _count: LoginLogCountAggregateOutputType | null
    _min: LoginLogMinAggregateOutputType | null
    _max: LoginLogMaxAggregateOutputType | null
  }

  type GetLoginLogGroupByPayload<T extends LoginLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoginLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoginLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoginLogGroupByOutputType[P]>
            : GetScalarType<T[P], LoginLogGroupByOutputType[P]>
        }
      >
    >


  export type LoginLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loginLog"]>

  export type LoginLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loginLog"]>

  export type LoginLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loginLog"]>

  export type LoginLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
  }

  export type LoginLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "timestamp", ExtArgs["result"]["loginLog"]>
  export type LoginLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoginLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoginLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LoginLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoginLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: $Enums.Action
      timestamp: Date
    }, ExtArgs["result"]["loginLog"]>
    composites: {}
  }

  type LoginLogGetPayload<S extends boolean | null | undefined | LoginLogDefaultArgs> = $Result.GetResult<Prisma.$LoginLogPayload, S>

  type LoginLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoginLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoginLogCountAggregateInputType | true
    }

  export interface LoginLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoginLog'], meta: { name: 'LoginLog' } }
    /**
     * Find zero or one LoginLog that matches the filter.
     * @param {LoginLogFindUniqueArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoginLogFindUniqueArgs>(args: SelectSubset<T, LoginLogFindUniqueArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LoginLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoginLogFindUniqueOrThrowArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoginLogFindUniqueOrThrowArgs>(args: SelectSubset<T, LoginLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoginLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogFindFirstArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoginLogFindFirstArgs>(args?: SelectSubset<T, LoginLogFindFirstArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoginLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogFindFirstOrThrowArgs} args - Arguments to find a LoginLog
     * @example
     * // Get one LoginLog
     * const loginLog = await prisma.loginLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoginLogFindFirstOrThrowArgs>(args?: SelectSubset<T, LoginLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LoginLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoginLogs
     * const loginLogs = await prisma.loginLog.findMany()
     * 
     * // Get first 10 LoginLogs
     * const loginLogs = await prisma.loginLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loginLogWithIdOnly = await prisma.loginLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoginLogFindManyArgs>(args?: SelectSubset<T, LoginLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LoginLog.
     * @param {LoginLogCreateArgs} args - Arguments to create a LoginLog.
     * @example
     * // Create one LoginLog
     * const LoginLog = await prisma.loginLog.create({
     *   data: {
     *     // ... data to create a LoginLog
     *   }
     * })
     * 
     */
    create<T extends LoginLogCreateArgs>(args: SelectSubset<T, LoginLogCreateArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LoginLogs.
     * @param {LoginLogCreateManyArgs} args - Arguments to create many LoginLogs.
     * @example
     * // Create many LoginLogs
     * const loginLog = await prisma.loginLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoginLogCreateManyArgs>(args?: SelectSubset<T, LoginLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LoginLogs and returns the data saved in the database.
     * @param {LoginLogCreateManyAndReturnArgs} args - Arguments to create many LoginLogs.
     * @example
     * // Create many LoginLogs
     * const loginLog = await prisma.loginLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LoginLogs and only return the `id`
     * const loginLogWithIdOnly = await prisma.loginLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoginLogCreateManyAndReturnArgs>(args?: SelectSubset<T, LoginLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LoginLog.
     * @param {LoginLogDeleteArgs} args - Arguments to delete one LoginLog.
     * @example
     * // Delete one LoginLog
     * const LoginLog = await prisma.loginLog.delete({
     *   where: {
     *     // ... filter to delete one LoginLog
     *   }
     * })
     * 
     */
    delete<T extends LoginLogDeleteArgs>(args: SelectSubset<T, LoginLogDeleteArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LoginLog.
     * @param {LoginLogUpdateArgs} args - Arguments to update one LoginLog.
     * @example
     * // Update one LoginLog
     * const loginLog = await prisma.loginLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoginLogUpdateArgs>(args: SelectSubset<T, LoginLogUpdateArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LoginLogs.
     * @param {LoginLogDeleteManyArgs} args - Arguments to filter LoginLogs to delete.
     * @example
     * // Delete a few LoginLogs
     * const { count } = await prisma.loginLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoginLogDeleteManyArgs>(args?: SelectSubset<T, LoginLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoginLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoginLogs
     * const loginLog = await prisma.loginLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoginLogUpdateManyArgs>(args: SelectSubset<T, LoginLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoginLogs and returns the data updated in the database.
     * @param {LoginLogUpdateManyAndReturnArgs} args - Arguments to update many LoginLogs.
     * @example
     * // Update many LoginLogs
     * const loginLog = await prisma.loginLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LoginLogs and only return the `id`
     * const loginLogWithIdOnly = await prisma.loginLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoginLogUpdateManyAndReturnArgs>(args: SelectSubset<T, LoginLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LoginLog.
     * @param {LoginLogUpsertArgs} args - Arguments to update or create a LoginLog.
     * @example
     * // Update or create a LoginLog
     * const loginLog = await prisma.loginLog.upsert({
     *   create: {
     *     // ... data to create a LoginLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoginLog we want to update
     *   }
     * })
     */
    upsert<T extends LoginLogUpsertArgs>(args: SelectSubset<T, LoginLogUpsertArgs<ExtArgs>>): Prisma__LoginLogClient<$Result.GetResult<Prisma.$LoginLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LoginLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogCountArgs} args - Arguments to filter LoginLogs to count.
     * @example
     * // Count the number of LoginLogs
     * const count = await prisma.loginLog.count({
     *   where: {
     *     // ... the filter for the LoginLogs we want to count
     *   }
     * })
    **/
    count<T extends LoginLogCountArgs>(
      args?: Subset<T, LoginLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoginLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginLogAggregateArgs>(args: Subset<T, LoginLogAggregateArgs>): Prisma.PrismaPromise<GetLoginLogAggregateType<T>>

    /**
     * Group by LoginLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoginLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoginLogGroupByArgs['orderBy'] }
        : { orderBy?: LoginLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoginLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoginLog model
   */
  readonly fields: LoginLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoginLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoginLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoginLog model
   */
  interface LoginLogFieldRefs {
    readonly id: FieldRef<"LoginLog", 'String'>
    readonly userId: FieldRef<"LoginLog", 'String'>
    readonly action: FieldRef<"LoginLog", 'Action'>
    readonly timestamp: FieldRef<"LoginLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LoginLog findUnique
   */
  export type LoginLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog findUniqueOrThrow
   */
  export type LoginLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog findFirst
   */
  export type LoginLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginLogs.
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginLogs.
     */
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * LoginLog findFirstOrThrow
   */
  export type LoginLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLog to fetch.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginLogs.
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginLogs.
     */
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * LoginLog findMany
   */
  export type LoginLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter, which LoginLogs to fetch.
     */
    where?: LoginLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginLogs to fetch.
     */
    orderBy?: LoginLogOrderByWithRelationInput | LoginLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoginLogs.
     */
    cursor?: LoginLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginLogs.
     */
    skip?: number
    distinct?: LoginLogScalarFieldEnum | LoginLogScalarFieldEnum[]
  }

  /**
   * LoginLog create
   */
  export type LoginLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * The data needed to create a LoginLog.
     */
    data: XOR<LoginLogCreateInput, LoginLogUncheckedCreateInput>
  }

  /**
   * LoginLog createMany
   */
  export type LoginLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoginLogs.
     */
    data: LoginLogCreateManyInput | LoginLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoginLog createManyAndReturn
   */
  export type LoginLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * The data used to create many LoginLogs.
     */
    data: LoginLogCreateManyInput | LoginLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LoginLog update
   */
  export type LoginLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * The data needed to update a LoginLog.
     */
    data: XOR<LoginLogUpdateInput, LoginLogUncheckedUpdateInput>
    /**
     * Choose, which LoginLog to update.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog updateMany
   */
  export type LoginLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoginLogs.
     */
    data: XOR<LoginLogUpdateManyMutationInput, LoginLogUncheckedUpdateManyInput>
    /**
     * Filter which LoginLogs to update
     */
    where?: LoginLogWhereInput
    /**
     * Limit how many LoginLogs to update.
     */
    limit?: number
  }

  /**
   * LoginLog updateManyAndReturn
   */
  export type LoginLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * The data used to update LoginLogs.
     */
    data: XOR<LoginLogUpdateManyMutationInput, LoginLogUncheckedUpdateManyInput>
    /**
     * Filter which LoginLogs to update
     */
    where?: LoginLogWhereInput
    /**
     * Limit how many LoginLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LoginLog upsert
   */
  export type LoginLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * The filter to search for the LoginLog to update in case it exists.
     */
    where: LoginLogWhereUniqueInput
    /**
     * In case the LoginLog found by the `where` argument doesn't exist, create a new LoginLog with this data.
     */
    create: XOR<LoginLogCreateInput, LoginLogUncheckedCreateInput>
    /**
     * In case the LoginLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoginLogUpdateInput, LoginLogUncheckedUpdateInput>
  }

  /**
   * LoginLog delete
   */
  export type LoginLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
    /**
     * Filter which LoginLog to delete.
     */
    where: LoginLogWhereUniqueInput
  }

  /**
   * LoginLog deleteMany
   */
  export type LoginLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginLogs to delete
     */
    where?: LoginLogWhereInput
    /**
     * Limit how many LoginLogs to delete.
     */
    limit?: number
  }

  /**
   * LoginLog without action
   */
  export type LoginLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginLog
     */
    select?: LoginLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoginLog
     */
    omit?: LoginLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    passwordHash: 'passwordHash',
    isApproved: 'isApproved',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const KeyPairScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    publicKey: 'publicKey',
    encryptedPrivKey: 'encryptedPrivKey'
  };

  export type KeyPairScalarFieldEnum = (typeof KeyPairScalarFieldEnum)[keyof typeof KeyPairScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    leaderId: 'leaderId',
    createdById: 'createdById'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const UserDepartmentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    departmentId: 'departmentId'
  };

  export type UserDepartmentScalarFieldEnum = (typeof UserDepartmentScalarFieldEnum)[keyof typeof UserDepartmentScalarFieldEnum]


  export const GroupKeyShareScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    departmentId: 'departmentId',
    encryptedKey: 'encryptedKey'
  };

  export type GroupKeyShareScalarFieldEnum = (typeof GroupKeyShareScalarFieldEnum)[keyof typeof GroupKeyShareScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    departmentId: 'departmentId',
    encryptedContent: 'encryptedContent',
    isBroadcast: 'isBroadcast',
    fileUrl: 'fileUrl',
    sentAt: 'sentAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const EncryptedAESKeyScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    userId: 'userId',
    aesKey: 'aesKey'
  };

  export type EncryptedAESKeyScalarFieldEnum = (typeof EncryptedAESKeyScalarFieldEnum)[keyof typeof EncryptedAESKeyScalarFieldEnum]


  export const LoginLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    timestamp: 'timestamp'
  };

  export type LoginLogScalarFieldEnum = (typeof LoginLogScalarFieldEnum)[keyof typeof LoginLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Action'
   */
  export type EnumActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Action'>
    


  /**
   * Reference to a field of type 'Action[]'
   */
  export type ListEnumActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Action[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    isApproved?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    keys?: XOR<KeyPairNullableScalarRelationFilter, KeyPairWhereInput> | null
    departments?: UserDepartmentListRelationFilter
    groupKeyShares?: GroupKeyShareListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    loginLogs?: LoginLogListRelationFilter
    ledDepartments?: DepartmentListRelationFilter
    createdDepartments?: DepartmentListRelationFilter
    encryptedAESKeys?: EncryptedAESKeyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    isApproved?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    keys?: KeyPairOrderByWithRelationInput
    departments?: UserDepartmentOrderByRelationAggregateInput
    groupKeyShares?: GroupKeyShareOrderByRelationAggregateInput
    messagesSent?: MessageOrderByRelationAggregateInput
    messagesReceived?: MessageOrderByRelationAggregateInput
    loginLogs?: LoginLogOrderByRelationAggregateInput
    ledDepartments?: DepartmentOrderByRelationAggregateInput
    createdDepartments?: DepartmentOrderByRelationAggregateInput
    encryptedAESKeys?: EncryptedAESKeyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    isApproved?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    keys?: XOR<KeyPairNullableScalarRelationFilter, KeyPairWhereInput> | null
    departments?: UserDepartmentListRelationFilter
    groupKeyShares?: GroupKeyShareListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    loginLogs?: LoginLogListRelationFilter
    ledDepartments?: DepartmentListRelationFilter
    createdDepartments?: DepartmentListRelationFilter
    encryptedAESKeys?: EncryptedAESKeyListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    isApproved?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    isApproved?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type KeyPairWhereInput = {
    AND?: KeyPairWhereInput | KeyPairWhereInput[]
    OR?: KeyPairWhereInput[]
    NOT?: KeyPairWhereInput | KeyPairWhereInput[]
    id?: StringFilter<"KeyPair"> | string
    userId?: StringFilter<"KeyPair"> | string
    publicKey?: StringFilter<"KeyPair"> | string
    encryptedPrivKey?: StringFilter<"KeyPair"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type KeyPairOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    encryptedPrivKey?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KeyPairWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: KeyPairWhereInput | KeyPairWhereInput[]
    OR?: KeyPairWhereInput[]
    NOT?: KeyPairWhereInput | KeyPairWhereInput[]
    publicKey?: StringFilter<"KeyPair"> | string
    encryptedPrivKey?: StringFilter<"KeyPair"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type KeyPairOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    encryptedPrivKey?: SortOrder
    _count?: KeyPairCountOrderByAggregateInput
    _max?: KeyPairMaxOrderByAggregateInput
    _min?: KeyPairMinOrderByAggregateInput
  }

  export type KeyPairScalarWhereWithAggregatesInput = {
    AND?: KeyPairScalarWhereWithAggregatesInput | KeyPairScalarWhereWithAggregatesInput[]
    OR?: KeyPairScalarWhereWithAggregatesInput[]
    NOT?: KeyPairScalarWhereWithAggregatesInput | KeyPairScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KeyPair"> | string
    userId?: StringWithAggregatesFilter<"KeyPair"> | string
    publicKey?: StringWithAggregatesFilter<"KeyPair"> | string
    encryptedPrivKey?: StringWithAggregatesFilter<"KeyPair"> | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    leaderId?: StringNullableFilter<"Department"> | string | null
    createdById?: StringNullableFilter<"Department"> | string | null
    leader?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserDepartmentListRelationFilter
    messages?: MessageListRelationFilter
    groupKeyShares?: GroupKeyShareListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    leader?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    users?: UserDepartmentOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    groupKeyShares?: GroupKeyShareOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    leaderId?: StringNullableFilter<"Department"> | string | null
    createdById?: StringNullableFilter<"Department"> | string | null
    leader?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserDepartmentListRelationFilter
    messages?: MessageListRelationFilter
    groupKeyShares?: GroupKeyShareListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    leaderId?: StringNullableWithAggregatesFilter<"Department"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"Department"> | string | null
  }

  export type UserDepartmentWhereInput = {
    AND?: UserDepartmentWhereInput | UserDepartmentWhereInput[]
    OR?: UserDepartmentWhereInput[]
    NOT?: UserDepartmentWhereInput | UserDepartmentWhereInput[]
    id?: StringFilter<"UserDepartment"> | string
    userId?: StringFilter<"UserDepartment"> | string
    departmentId?: StringFilter<"UserDepartment"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }

  export type UserDepartmentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    user?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type UserDepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_departmentId?: UserDepartmentUserIdDepartmentIdCompoundUniqueInput
    AND?: UserDepartmentWhereInput | UserDepartmentWhereInput[]
    OR?: UserDepartmentWhereInput[]
    NOT?: UserDepartmentWhereInput | UserDepartmentWhereInput[]
    userId?: StringFilter<"UserDepartment"> | string
    departmentId?: StringFilter<"UserDepartment"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }, "id" | "userId_departmentId">

  export type UserDepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    _count?: UserDepartmentCountOrderByAggregateInput
    _max?: UserDepartmentMaxOrderByAggregateInput
    _min?: UserDepartmentMinOrderByAggregateInput
  }

  export type UserDepartmentScalarWhereWithAggregatesInput = {
    AND?: UserDepartmentScalarWhereWithAggregatesInput | UserDepartmentScalarWhereWithAggregatesInput[]
    OR?: UserDepartmentScalarWhereWithAggregatesInput[]
    NOT?: UserDepartmentScalarWhereWithAggregatesInput | UserDepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserDepartment"> | string
    userId?: StringWithAggregatesFilter<"UserDepartment"> | string
    departmentId?: StringWithAggregatesFilter<"UserDepartment"> | string
  }

  export type GroupKeyShareWhereInput = {
    AND?: GroupKeyShareWhereInput | GroupKeyShareWhereInput[]
    OR?: GroupKeyShareWhereInput[]
    NOT?: GroupKeyShareWhereInput | GroupKeyShareWhereInput[]
    id?: StringFilter<"GroupKeyShare"> | string
    userId?: StringFilter<"GroupKeyShare"> | string
    departmentId?: StringFilter<"GroupKeyShare"> | string
    encryptedKey?: StringFilter<"GroupKeyShare"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }

  export type GroupKeyShareOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    encryptedKey?: SortOrder
    user?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type GroupKeyShareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_departmentId?: GroupKeyShareUserIdDepartmentIdCompoundUniqueInput
    AND?: GroupKeyShareWhereInput | GroupKeyShareWhereInput[]
    OR?: GroupKeyShareWhereInput[]
    NOT?: GroupKeyShareWhereInput | GroupKeyShareWhereInput[]
    userId?: StringFilter<"GroupKeyShare"> | string
    departmentId?: StringFilter<"GroupKeyShare"> | string
    encryptedKey?: StringFilter<"GroupKeyShare"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }, "id" | "userId_departmentId">

  export type GroupKeyShareOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    encryptedKey?: SortOrder
    _count?: GroupKeyShareCountOrderByAggregateInput
    _max?: GroupKeyShareMaxOrderByAggregateInput
    _min?: GroupKeyShareMinOrderByAggregateInput
  }

  export type GroupKeyShareScalarWhereWithAggregatesInput = {
    AND?: GroupKeyShareScalarWhereWithAggregatesInput | GroupKeyShareScalarWhereWithAggregatesInput[]
    OR?: GroupKeyShareScalarWhereWithAggregatesInput[]
    NOT?: GroupKeyShareScalarWhereWithAggregatesInput | GroupKeyShareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GroupKeyShare"> | string
    userId?: StringWithAggregatesFilter<"GroupKeyShare"> | string
    departmentId?: StringWithAggregatesFilter<"GroupKeyShare"> | string
    encryptedKey?: StringWithAggregatesFilter<"GroupKeyShare"> | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringNullableFilter<"Message"> | string | null
    departmentId?: StringNullableFilter<"Message"> | string | null
    encryptedContent?: StringFilter<"Message"> | string
    isBroadcast?: BoolFilter<"Message"> | boolean
    fileUrl?: StringNullableFilter<"Message"> | string | null
    sentAt?: DateTimeFilter<"Message"> | Date | string
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    encryptedAESKeys?: EncryptedAESKeyListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    encryptedContent?: SortOrder
    isBroadcast?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    sentAt?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    encryptedAESKeys?: EncryptedAESKeyOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringNullableFilter<"Message"> | string | null
    departmentId?: StringNullableFilter<"Message"> | string | null
    encryptedContent?: StringFilter<"Message"> | string
    isBroadcast?: BoolFilter<"Message"> | boolean
    fileUrl?: StringNullableFilter<"Message"> | string | null
    sentAt?: DateTimeFilter<"Message"> | Date | string
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    encryptedAESKeys?: EncryptedAESKeyListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    encryptedContent?: SortOrder
    isBroadcast?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    sentAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    receiverId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    departmentId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    encryptedContent?: StringWithAggregatesFilter<"Message"> | string
    isBroadcast?: BoolWithAggregatesFilter<"Message"> | boolean
    fileUrl?: StringNullableWithAggregatesFilter<"Message"> | string | null
    sentAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type EncryptedAESKeyWhereInput = {
    AND?: EncryptedAESKeyWhereInput | EncryptedAESKeyWhereInput[]
    OR?: EncryptedAESKeyWhereInput[]
    NOT?: EncryptedAESKeyWhereInput | EncryptedAESKeyWhereInput[]
    id?: StringFilter<"EncryptedAESKey"> | string
    messageId?: StringFilter<"EncryptedAESKey"> | string
    userId?: StringFilter<"EncryptedAESKey"> | string
    aesKey?: StringFilter<"EncryptedAESKey"> | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EncryptedAESKeyOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    aesKey?: SortOrder
    message?: MessageOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EncryptedAESKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    messageId_userId?: EncryptedAESKeyMessageIdUserIdCompoundUniqueInput
    AND?: EncryptedAESKeyWhereInput | EncryptedAESKeyWhereInput[]
    OR?: EncryptedAESKeyWhereInput[]
    NOT?: EncryptedAESKeyWhereInput | EncryptedAESKeyWhereInput[]
    messageId?: StringFilter<"EncryptedAESKey"> | string
    userId?: StringFilter<"EncryptedAESKey"> | string
    aesKey?: StringFilter<"EncryptedAESKey"> | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "messageId_userId">

  export type EncryptedAESKeyOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    aesKey?: SortOrder
    _count?: EncryptedAESKeyCountOrderByAggregateInput
    _max?: EncryptedAESKeyMaxOrderByAggregateInput
    _min?: EncryptedAESKeyMinOrderByAggregateInput
  }

  export type EncryptedAESKeyScalarWhereWithAggregatesInput = {
    AND?: EncryptedAESKeyScalarWhereWithAggregatesInput | EncryptedAESKeyScalarWhereWithAggregatesInput[]
    OR?: EncryptedAESKeyScalarWhereWithAggregatesInput[]
    NOT?: EncryptedAESKeyScalarWhereWithAggregatesInput | EncryptedAESKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EncryptedAESKey"> | string
    messageId?: StringWithAggregatesFilter<"EncryptedAESKey"> | string
    userId?: StringWithAggregatesFilter<"EncryptedAESKey"> | string
    aesKey?: StringWithAggregatesFilter<"EncryptedAESKey"> | string
  }

  export type LoginLogWhereInput = {
    AND?: LoginLogWhereInput | LoginLogWhereInput[]
    OR?: LoginLogWhereInput[]
    NOT?: LoginLogWhereInput | LoginLogWhereInput[]
    id?: StringFilter<"LoginLog"> | string
    userId?: StringFilter<"LoginLog"> | string
    action?: EnumActionFilter<"LoginLog"> | $Enums.Action
    timestamp?: DateTimeFilter<"LoginLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LoginLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LoginLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoginLogWhereInput | LoginLogWhereInput[]
    OR?: LoginLogWhereInput[]
    NOT?: LoginLogWhereInput | LoginLogWhereInput[]
    userId?: StringFilter<"LoginLog"> | string
    action?: EnumActionFilter<"LoginLog"> | $Enums.Action
    timestamp?: DateTimeFilter<"LoginLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LoginLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    _count?: LoginLogCountOrderByAggregateInput
    _max?: LoginLogMaxOrderByAggregateInput
    _min?: LoginLogMinOrderByAggregateInput
  }

  export type LoginLogScalarWhereWithAggregatesInput = {
    AND?: LoginLogScalarWhereWithAggregatesInput | LoginLogScalarWhereWithAggregatesInput[]
    OR?: LoginLogScalarWhereWithAggregatesInput[]
    NOT?: LoginLogScalarWhereWithAggregatesInput | LoginLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LoginLog"> | string
    userId?: StringWithAggregatesFilter<"LoginLog"> | string
    action?: EnumActionWithAggregatesFilter<"LoginLog"> | $Enums.Action
    timestamp?: DateTimeWithAggregatesFilter<"LoginLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyPairCreateInput = {
    id?: string
    publicKey: string
    encryptedPrivKey: string
    user: UserCreateNestedOneWithoutKeysInput
  }

  export type KeyPairUncheckedCreateInput = {
    id?: string
    userId: string
    publicKey: string
    encryptedPrivKey: string
  }

  export type KeyPairUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    encryptedPrivKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutKeysNestedInput
  }

  export type KeyPairUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    encryptedPrivKey?: StringFieldUpdateOperationsInput | string
  }

  export type KeyPairCreateManyInput = {
    id?: string
    userId: string
    publicKey: string
    encryptedPrivKey: string
  }

  export type KeyPairUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    encryptedPrivKey?: StringFieldUpdateOperationsInput | string
  }

  export type KeyPairUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    encryptedPrivKey?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    leader?: UserCreateNestedOneWithoutLedDepartmentsInput
    createdBy?: UserCreateNestedOneWithoutCreatedDepartmentsInput
    users?: UserDepartmentCreateNestedManyWithoutDepartmentInput
    messages?: MessageCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdById?: string | null
    users?: UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInput
    messages?: MessageUncheckedCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leader?: UserUpdateOneWithoutLedDepartmentsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedDepartmentsNestedInput
    users?: UserDepartmentUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUncheckedUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdById?: string | null
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserDepartmentCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutDepartmentsInput
    department: DepartmentCreateNestedOneWithoutUsersInput
  }

  export type UserDepartmentUncheckedCreateInput = {
    id?: string
    userId: string
    departmentId: string
  }

  export type UserDepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDepartmentsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserDepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDepartmentCreateManyInput = {
    id?: string
    userId: string
    departmentId: string
  }

  export type UserDepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type UserDepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type GroupKeyShareCreateInput = {
    id?: string
    encryptedKey: string
    user: UserCreateNestedOneWithoutGroupKeySharesInput
    department: DepartmentCreateNestedOneWithoutGroupKeySharesInput
  }

  export type GroupKeyShareUncheckedCreateInput = {
    id?: string
    userId: string
    departmentId: string
    encryptedKey: string
  }

  export type GroupKeyShareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutGroupKeySharesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutGroupKeySharesNestedInput
  }

  export type GroupKeyShareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type GroupKeyShareCreateManyInput = {
    id?: string
    userId: string
    departmentId: string
    encryptedKey: string
  }

  export type GroupKeyShareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type GroupKeyShareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateInput = {
    id?: string
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesSentInput
    receiver?: UserCreateNestedOneWithoutMessagesReceivedInput
    department?: DepartmentCreateNestedOneWithoutMessagesInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    senderId: string
    receiverId?: string | null
    departmentId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
    receiver?: UserUpdateOneWithoutMessagesReceivedNestedInput
    department?: DepartmentUpdateOneWithoutMessagesNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: string
    senderId: string
    receiverId?: string | null
    departmentId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EncryptedAESKeyCreateInput = {
    id?: string
    aesKey: string
    message: MessageCreateNestedOneWithoutEncryptedAESKeysInput
    user: UserCreateNestedOneWithoutEncryptedAESKeysInput
  }

  export type EncryptedAESKeyUncheckedCreateInput = {
    id?: string
    messageId: string
    userId: string
    aesKey: string
  }

  export type EncryptedAESKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutEncryptedAESKeysNestedInput
    user?: UserUpdateOneRequiredWithoutEncryptedAESKeysNestedInput
  }

  export type EncryptedAESKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
  }

  export type EncryptedAESKeyCreateManyInput = {
    id?: string
    messageId: string
    userId: string
    aesKey: string
  }

  export type EncryptedAESKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
  }

  export type EncryptedAESKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
  }

  export type LoginLogCreateInput = {
    id?: string
    action: $Enums.Action
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutLoginLogsInput
  }

  export type LoginLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: $Enums.Action
    timestamp?: Date | string
  }

  export type LoginLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionFieldUpdateOperationsInput | $Enums.Action
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLoginLogsNestedInput
  }

  export type LoginLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: EnumActionFieldUpdateOperationsInput | $Enums.Action
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogCreateManyInput = {
    id?: string
    userId: string
    action: $Enums.Action
    timestamp?: Date | string
  }

  export type LoginLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionFieldUpdateOperationsInput | $Enums.Action
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: EnumActionFieldUpdateOperationsInput | $Enums.Action
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type KeyPairNullableScalarRelationFilter = {
    is?: KeyPairWhereInput | null
    isNot?: KeyPairWhereInput | null
  }

  export type UserDepartmentListRelationFilter = {
    every?: UserDepartmentWhereInput
    some?: UserDepartmentWhereInput
    none?: UserDepartmentWhereInput
  }

  export type GroupKeyShareListRelationFilter = {
    every?: GroupKeyShareWhereInput
    some?: GroupKeyShareWhereInput
    none?: GroupKeyShareWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type LoginLogListRelationFilter = {
    every?: LoginLogWhereInput
    some?: LoginLogWhereInput
    none?: LoginLogWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type EncryptedAESKeyListRelationFilter = {
    every?: EncryptedAESKeyWhereInput
    some?: EncryptedAESKeyWhereInput
    none?: EncryptedAESKeyWhereInput
  }

  export type UserDepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupKeyShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoginLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EncryptedAESKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    isApproved?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    isApproved?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    isApproved?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type KeyPairCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    encryptedPrivKey?: SortOrder
  }

  export type KeyPairMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    encryptedPrivKey?: SortOrder
  }

  export type KeyPairMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    encryptedPrivKey?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    createdById?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    createdById?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    createdById?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type UserDepartmentUserIdDepartmentIdCompoundUniqueInput = {
    userId: string
    departmentId: string
  }

  export type UserDepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
  }

  export type UserDepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
  }

  export type UserDepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
  }

  export type GroupKeyShareUserIdDepartmentIdCompoundUniqueInput = {
    userId: string
    departmentId: string
  }

  export type GroupKeyShareCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type GroupKeyShareMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type GroupKeyShareMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    departmentId?: SortOrder
    encryptedContent?: SortOrder
    isBroadcast?: SortOrder
    fileUrl?: SortOrder
    sentAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    departmentId?: SortOrder
    encryptedContent?: SortOrder
    isBroadcast?: SortOrder
    fileUrl?: SortOrder
    sentAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    departmentId?: SortOrder
    encryptedContent?: SortOrder
    isBroadcast?: SortOrder
    fileUrl?: SortOrder
    sentAt?: SortOrder
  }

  export type MessageScalarRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type EncryptedAESKeyMessageIdUserIdCompoundUniqueInput = {
    messageId: string
    userId: string
  }

  export type EncryptedAESKeyCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    aesKey?: SortOrder
  }

  export type EncryptedAESKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    aesKey?: SortOrder
  }

  export type EncryptedAESKeyMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    aesKey?: SortOrder
  }

  export type EnumActionFilter<$PrismaModel = never> = {
    equals?: $Enums.Action | EnumActionFieldRefInput<$PrismaModel>
    in?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActionFilter<$PrismaModel> | $Enums.Action
  }

  export type LoginLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
  }

  export type LoginLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
  }

  export type LoginLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Action | EnumActionFieldRefInput<$PrismaModel>
    in?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActionWithAggregatesFilter<$PrismaModel> | $Enums.Action
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionFilter<$PrismaModel>
    _max?: NestedEnumActionFilter<$PrismaModel>
  }

  export type KeyPairCreateNestedOneWithoutUserInput = {
    create?: XOR<KeyPairCreateWithoutUserInput, KeyPairUncheckedCreateWithoutUserInput>
    connectOrCreate?: KeyPairCreateOrConnectWithoutUserInput
    connect?: KeyPairWhereUniqueInput
  }

  export type UserDepartmentCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDepartmentCreateWithoutUserInput, UserDepartmentUncheckedCreateWithoutUserInput> | UserDepartmentCreateWithoutUserInput[] | UserDepartmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutUserInput | UserDepartmentCreateOrConnectWithoutUserInput[]
    createMany?: UserDepartmentCreateManyUserInputEnvelope
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
  }

  export type GroupKeyShareCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupKeyShareCreateWithoutUserInput, GroupKeyShareUncheckedCreateWithoutUserInput> | GroupKeyShareCreateWithoutUserInput[] | GroupKeyShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutUserInput | GroupKeyShareCreateOrConnectWithoutUserInput[]
    createMany?: GroupKeyShareCreateManyUserInputEnvelope
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LoginLogCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutLeaderInput = {
    create?: XOR<DepartmentCreateWithoutLeaderInput, DepartmentUncheckedCreateWithoutLeaderInput> | DepartmentCreateWithoutLeaderInput[] | DepartmentUncheckedCreateWithoutLeaderInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutLeaderInput | DepartmentCreateOrConnectWithoutLeaderInput[]
    createMany?: DepartmentCreateManyLeaderInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type EncryptedAESKeyCreateNestedManyWithoutUserInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutUserInput, EncryptedAESKeyUncheckedCreateWithoutUserInput> | EncryptedAESKeyCreateWithoutUserInput[] | EncryptedAESKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutUserInput | EncryptedAESKeyCreateOrConnectWithoutUserInput[]
    createMany?: EncryptedAESKeyCreateManyUserInputEnvelope
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
  }

  export type KeyPairUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<KeyPairCreateWithoutUserInput, KeyPairUncheckedCreateWithoutUserInput>
    connectOrCreate?: KeyPairCreateOrConnectWithoutUserInput
    connect?: KeyPairWhereUniqueInput
  }

  export type UserDepartmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDepartmentCreateWithoutUserInput, UserDepartmentUncheckedCreateWithoutUserInput> | UserDepartmentCreateWithoutUserInput[] | UserDepartmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutUserInput | UserDepartmentCreateOrConnectWithoutUserInput[]
    createMany?: UserDepartmentCreateManyUserInputEnvelope
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
  }

  export type GroupKeyShareUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupKeyShareCreateWithoutUserInput, GroupKeyShareUncheckedCreateWithoutUserInput> | GroupKeyShareCreateWithoutUserInput[] | GroupKeyShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutUserInput | GroupKeyShareCreateOrConnectWithoutUserInput[]
    createMany?: GroupKeyShareCreateManyUserInputEnvelope
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LoginLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutLeaderInput = {
    create?: XOR<DepartmentCreateWithoutLeaderInput, DepartmentUncheckedCreateWithoutLeaderInput> | DepartmentCreateWithoutLeaderInput[] | DepartmentUncheckedCreateWithoutLeaderInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutLeaderInput | DepartmentCreateOrConnectWithoutLeaderInput[]
    createMany?: DepartmentCreateManyLeaderInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutUserInput, EncryptedAESKeyUncheckedCreateWithoutUserInput> | EncryptedAESKeyCreateWithoutUserInput[] | EncryptedAESKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutUserInput | EncryptedAESKeyCreateOrConnectWithoutUserInput[]
    createMany?: EncryptedAESKeyCreateManyUserInputEnvelope
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type KeyPairUpdateOneWithoutUserNestedInput = {
    create?: XOR<KeyPairCreateWithoutUserInput, KeyPairUncheckedCreateWithoutUserInput>
    connectOrCreate?: KeyPairCreateOrConnectWithoutUserInput
    upsert?: KeyPairUpsertWithoutUserInput
    disconnect?: KeyPairWhereInput | boolean
    delete?: KeyPairWhereInput | boolean
    connect?: KeyPairWhereUniqueInput
    update?: XOR<XOR<KeyPairUpdateToOneWithWhereWithoutUserInput, KeyPairUpdateWithoutUserInput>, KeyPairUncheckedUpdateWithoutUserInput>
  }

  export type UserDepartmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDepartmentCreateWithoutUserInput, UserDepartmentUncheckedCreateWithoutUserInput> | UserDepartmentCreateWithoutUserInput[] | UserDepartmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutUserInput | UserDepartmentCreateOrConnectWithoutUserInput[]
    upsert?: UserDepartmentUpsertWithWhereUniqueWithoutUserInput | UserDepartmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDepartmentCreateManyUserInputEnvelope
    set?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    disconnect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    delete?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    update?: UserDepartmentUpdateWithWhereUniqueWithoutUserInput | UserDepartmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDepartmentUpdateManyWithWhereWithoutUserInput | UserDepartmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDepartmentScalarWhereInput | UserDepartmentScalarWhereInput[]
  }

  export type GroupKeyShareUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupKeyShareCreateWithoutUserInput, GroupKeyShareUncheckedCreateWithoutUserInput> | GroupKeyShareCreateWithoutUserInput[] | GroupKeyShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutUserInput | GroupKeyShareCreateOrConnectWithoutUserInput[]
    upsert?: GroupKeyShareUpsertWithWhereUniqueWithoutUserInput | GroupKeyShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupKeyShareCreateManyUserInputEnvelope
    set?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    disconnect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    delete?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    update?: GroupKeyShareUpdateWithWhereUniqueWithoutUserInput | GroupKeyShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupKeyShareUpdateManyWithWhereWithoutUserInput | GroupKeyShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupKeyShareScalarWhereInput | GroupKeyShareScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LoginLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    upsert?: LoginLogUpsertWithWhereUniqueWithoutUserInput | LoginLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    set?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    disconnect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    delete?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    update?: LoginLogUpdateWithWhereUniqueWithoutUserInput | LoginLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginLogUpdateManyWithWhereWithoutUserInput | LoginLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutLeaderNestedInput = {
    create?: XOR<DepartmentCreateWithoutLeaderInput, DepartmentUncheckedCreateWithoutLeaderInput> | DepartmentCreateWithoutLeaderInput[] | DepartmentUncheckedCreateWithoutLeaderInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutLeaderInput | DepartmentCreateOrConnectWithoutLeaderInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutLeaderInput | DepartmentUpsertWithWhereUniqueWithoutLeaderInput[]
    createMany?: DepartmentCreateManyLeaderInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutLeaderInput | DepartmentUpdateWithWhereUniqueWithoutLeaderInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutLeaderInput | DepartmentUpdateManyWithWhereWithoutLeaderInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCreatedByInput | DepartmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCreatedByInput | DepartmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCreatedByInput | DepartmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type EncryptedAESKeyUpdateManyWithoutUserNestedInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutUserInput, EncryptedAESKeyUncheckedCreateWithoutUserInput> | EncryptedAESKeyCreateWithoutUserInput[] | EncryptedAESKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutUserInput | EncryptedAESKeyCreateOrConnectWithoutUserInput[]
    upsert?: EncryptedAESKeyUpsertWithWhereUniqueWithoutUserInput | EncryptedAESKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EncryptedAESKeyCreateManyUserInputEnvelope
    set?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    disconnect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    delete?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    update?: EncryptedAESKeyUpdateWithWhereUniqueWithoutUserInput | EncryptedAESKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EncryptedAESKeyUpdateManyWithWhereWithoutUserInput | EncryptedAESKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EncryptedAESKeyScalarWhereInput | EncryptedAESKeyScalarWhereInput[]
  }

  export type KeyPairUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<KeyPairCreateWithoutUserInput, KeyPairUncheckedCreateWithoutUserInput>
    connectOrCreate?: KeyPairCreateOrConnectWithoutUserInput
    upsert?: KeyPairUpsertWithoutUserInput
    disconnect?: KeyPairWhereInput | boolean
    delete?: KeyPairWhereInput | boolean
    connect?: KeyPairWhereUniqueInput
    update?: XOR<XOR<KeyPairUpdateToOneWithWhereWithoutUserInput, KeyPairUpdateWithoutUserInput>, KeyPairUncheckedUpdateWithoutUserInput>
  }

  export type UserDepartmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDepartmentCreateWithoutUserInput, UserDepartmentUncheckedCreateWithoutUserInput> | UserDepartmentCreateWithoutUserInput[] | UserDepartmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutUserInput | UserDepartmentCreateOrConnectWithoutUserInput[]
    upsert?: UserDepartmentUpsertWithWhereUniqueWithoutUserInput | UserDepartmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDepartmentCreateManyUserInputEnvelope
    set?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    disconnect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    delete?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    update?: UserDepartmentUpdateWithWhereUniqueWithoutUserInput | UserDepartmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDepartmentUpdateManyWithWhereWithoutUserInput | UserDepartmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDepartmentScalarWhereInput | UserDepartmentScalarWhereInput[]
  }

  export type GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupKeyShareCreateWithoutUserInput, GroupKeyShareUncheckedCreateWithoutUserInput> | GroupKeyShareCreateWithoutUserInput[] | GroupKeyShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutUserInput | GroupKeyShareCreateOrConnectWithoutUserInput[]
    upsert?: GroupKeyShareUpsertWithWhereUniqueWithoutUserInput | GroupKeyShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupKeyShareCreateManyUserInputEnvelope
    set?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    disconnect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    delete?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    update?: GroupKeyShareUpdateWithWhereUniqueWithoutUserInput | GroupKeyShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupKeyShareUpdateManyWithWhereWithoutUserInput | GroupKeyShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupKeyShareScalarWhereInput | GroupKeyShareScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LoginLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput> | LoginLogCreateWithoutUserInput[] | LoginLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginLogCreateOrConnectWithoutUserInput | LoginLogCreateOrConnectWithoutUserInput[]
    upsert?: LoginLogUpsertWithWhereUniqueWithoutUserInput | LoginLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginLogCreateManyUserInputEnvelope
    set?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    disconnect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    delete?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    connect?: LoginLogWhereUniqueInput | LoginLogWhereUniqueInput[]
    update?: LoginLogUpdateWithWhereUniqueWithoutUserInput | LoginLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginLogUpdateManyWithWhereWithoutUserInput | LoginLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutLeaderNestedInput = {
    create?: XOR<DepartmentCreateWithoutLeaderInput, DepartmentUncheckedCreateWithoutLeaderInput> | DepartmentCreateWithoutLeaderInput[] | DepartmentUncheckedCreateWithoutLeaderInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutLeaderInput | DepartmentCreateOrConnectWithoutLeaderInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutLeaderInput | DepartmentUpsertWithWhereUniqueWithoutLeaderInput[]
    createMany?: DepartmentCreateManyLeaderInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutLeaderInput | DepartmentUpdateWithWhereUniqueWithoutLeaderInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutLeaderInput | DepartmentUpdateManyWithWhereWithoutLeaderInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCreatedByInput | DepartmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCreatedByInput | DepartmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCreatedByInput | DepartmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutUserInput, EncryptedAESKeyUncheckedCreateWithoutUserInput> | EncryptedAESKeyCreateWithoutUserInput[] | EncryptedAESKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutUserInput | EncryptedAESKeyCreateOrConnectWithoutUserInput[]
    upsert?: EncryptedAESKeyUpsertWithWhereUniqueWithoutUserInput | EncryptedAESKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EncryptedAESKeyCreateManyUserInputEnvelope
    set?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    disconnect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    delete?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    update?: EncryptedAESKeyUpdateWithWhereUniqueWithoutUserInput | EncryptedAESKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EncryptedAESKeyUpdateManyWithWhereWithoutUserInput | EncryptedAESKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EncryptedAESKeyScalarWhereInput | EncryptedAESKeyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutKeysInput = {
    create?: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutKeysInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutKeysNestedInput = {
    create?: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutKeysInput
    upsert?: UserUpsertWithoutKeysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKeysInput, UserUpdateWithoutKeysInput>, UserUncheckedUpdateWithoutKeysInput>
  }

  export type UserCreateNestedOneWithoutLedDepartmentsInput = {
    create?: XOR<UserCreateWithoutLedDepartmentsInput, UserUncheckedCreateWithoutLedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLedDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedDepartmentsInput = {
    create?: XOR<UserCreateWithoutCreatedDepartmentsInput, UserUncheckedCreateWithoutCreatedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserDepartmentCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserDepartmentCreateWithoutDepartmentInput, UserDepartmentUncheckedCreateWithoutDepartmentInput> | UserDepartmentCreateWithoutDepartmentInput[] | UserDepartmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutDepartmentInput | UserDepartmentCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserDepartmentCreateManyDepartmentInputEnvelope
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<MessageCreateWithoutDepartmentInput, MessageUncheckedCreateWithoutDepartmentInput> | MessageCreateWithoutDepartmentInput[] | MessageUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDepartmentInput | MessageCreateOrConnectWithoutDepartmentInput[]
    createMany?: MessageCreateManyDepartmentInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type GroupKeyShareCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<GroupKeyShareCreateWithoutDepartmentInput, GroupKeyShareUncheckedCreateWithoutDepartmentInput> | GroupKeyShareCreateWithoutDepartmentInput[] | GroupKeyShareUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutDepartmentInput | GroupKeyShareCreateOrConnectWithoutDepartmentInput[]
    createMany?: GroupKeyShareCreateManyDepartmentInputEnvelope
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
  }

  export type UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserDepartmentCreateWithoutDepartmentInput, UserDepartmentUncheckedCreateWithoutDepartmentInput> | UserDepartmentCreateWithoutDepartmentInput[] | UserDepartmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutDepartmentInput | UserDepartmentCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserDepartmentCreateManyDepartmentInputEnvelope
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<MessageCreateWithoutDepartmentInput, MessageUncheckedCreateWithoutDepartmentInput> | MessageCreateWithoutDepartmentInput[] | MessageUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDepartmentInput | MessageCreateOrConnectWithoutDepartmentInput[]
    createMany?: MessageCreateManyDepartmentInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type GroupKeyShareUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<GroupKeyShareCreateWithoutDepartmentInput, GroupKeyShareUncheckedCreateWithoutDepartmentInput> | GroupKeyShareCreateWithoutDepartmentInput[] | GroupKeyShareUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutDepartmentInput | GroupKeyShareCreateOrConnectWithoutDepartmentInput[]
    createMany?: GroupKeyShareCreateManyDepartmentInputEnvelope
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutLedDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutLedDepartmentsInput, UserUncheckedCreateWithoutLedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLedDepartmentsInput
    upsert?: UserUpsertWithoutLedDepartmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLedDepartmentsInput, UserUpdateWithoutLedDepartmentsInput>, UserUncheckedUpdateWithoutLedDepartmentsInput>
  }

  export type UserUpdateOneWithoutCreatedDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedDepartmentsInput, UserUncheckedCreateWithoutCreatedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedDepartmentsInput
    upsert?: UserUpsertWithoutCreatedDepartmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedDepartmentsInput, UserUpdateWithoutCreatedDepartmentsInput>, UserUncheckedUpdateWithoutCreatedDepartmentsInput>
  }

  export type UserDepartmentUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserDepartmentCreateWithoutDepartmentInput, UserDepartmentUncheckedCreateWithoutDepartmentInput> | UserDepartmentCreateWithoutDepartmentInput[] | UserDepartmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutDepartmentInput | UserDepartmentCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInput | UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserDepartmentCreateManyDepartmentInputEnvelope
    set?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    disconnect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    delete?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    update?: UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInput | UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserDepartmentUpdateManyWithWhereWithoutDepartmentInput | UserDepartmentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserDepartmentScalarWhereInput | UserDepartmentScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<MessageCreateWithoutDepartmentInput, MessageUncheckedCreateWithoutDepartmentInput> | MessageCreateWithoutDepartmentInput[] | MessageUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDepartmentInput | MessageCreateOrConnectWithoutDepartmentInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDepartmentInput | MessageUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: MessageCreateManyDepartmentInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDepartmentInput | MessageUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDepartmentInput | MessageUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type GroupKeyShareUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<GroupKeyShareCreateWithoutDepartmentInput, GroupKeyShareUncheckedCreateWithoutDepartmentInput> | GroupKeyShareCreateWithoutDepartmentInput[] | GroupKeyShareUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutDepartmentInput | GroupKeyShareCreateOrConnectWithoutDepartmentInput[]
    upsert?: GroupKeyShareUpsertWithWhereUniqueWithoutDepartmentInput | GroupKeyShareUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: GroupKeyShareCreateManyDepartmentInputEnvelope
    set?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    disconnect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    delete?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    update?: GroupKeyShareUpdateWithWhereUniqueWithoutDepartmentInput | GroupKeyShareUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: GroupKeyShareUpdateManyWithWhereWithoutDepartmentInput | GroupKeyShareUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: GroupKeyShareScalarWhereInput | GroupKeyShareScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserDepartmentCreateWithoutDepartmentInput, UserDepartmentUncheckedCreateWithoutDepartmentInput> | UserDepartmentCreateWithoutDepartmentInput[] | UserDepartmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserDepartmentCreateOrConnectWithoutDepartmentInput | UserDepartmentCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInput | UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserDepartmentCreateManyDepartmentInputEnvelope
    set?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    disconnect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    delete?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    connect?: UserDepartmentWhereUniqueInput | UserDepartmentWhereUniqueInput[]
    update?: UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInput | UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserDepartmentUpdateManyWithWhereWithoutDepartmentInput | UserDepartmentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserDepartmentScalarWhereInput | UserDepartmentScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<MessageCreateWithoutDepartmentInput, MessageUncheckedCreateWithoutDepartmentInput> | MessageCreateWithoutDepartmentInput[] | MessageUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDepartmentInput | MessageCreateOrConnectWithoutDepartmentInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDepartmentInput | MessageUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: MessageCreateManyDepartmentInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDepartmentInput | MessageUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDepartmentInput | MessageUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type GroupKeyShareUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<GroupKeyShareCreateWithoutDepartmentInput, GroupKeyShareUncheckedCreateWithoutDepartmentInput> | GroupKeyShareCreateWithoutDepartmentInput[] | GroupKeyShareUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GroupKeyShareCreateOrConnectWithoutDepartmentInput | GroupKeyShareCreateOrConnectWithoutDepartmentInput[]
    upsert?: GroupKeyShareUpsertWithWhereUniqueWithoutDepartmentInput | GroupKeyShareUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: GroupKeyShareCreateManyDepartmentInputEnvelope
    set?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    disconnect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    delete?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    connect?: GroupKeyShareWhereUniqueInput | GroupKeyShareWhereUniqueInput[]
    update?: GroupKeyShareUpdateWithWhereUniqueWithoutDepartmentInput | GroupKeyShareUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: GroupKeyShareUpdateManyWithWhereWithoutDepartmentInput | GroupKeyShareUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: GroupKeyShareScalarWhereInput | GroupKeyShareScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentsInput
    upsert?: UserUpsertWithoutDepartmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDepartmentsInput, UserUpdateWithoutDepartmentsInput>, UserUncheckedUpdateWithoutDepartmentsInput>
  }

  export type DepartmentUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedOneWithoutGroupKeySharesInput = {
    create?: XOR<UserCreateWithoutGroupKeySharesInput, UserUncheckedCreateWithoutGroupKeySharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupKeySharesInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutGroupKeySharesInput = {
    create?: XOR<DepartmentCreateWithoutGroupKeySharesInput, DepartmentUncheckedCreateWithoutGroupKeySharesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutGroupKeySharesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGroupKeySharesNestedInput = {
    create?: XOR<UserCreateWithoutGroupKeySharesInput, UserUncheckedCreateWithoutGroupKeySharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupKeySharesInput
    upsert?: UserUpsertWithoutGroupKeySharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGroupKeySharesInput, UserUpdateWithoutGroupKeySharesInput>, UserUncheckedUpdateWithoutGroupKeySharesInput>
  }

  export type DepartmentUpdateOneRequiredWithoutGroupKeySharesNestedInput = {
    create?: XOR<DepartmentCreateWithoutGroupKeySharesInput, DepartmentUncheckedCreateWithoutGroupKeySharesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutGroupKeySharesInput
    upsert?: DepartmentUpsertWithoutGroupKeySharesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutGroupKeySharesInput, DepartmentUpdateWithoutGroupKeySharesInput>, DepartmentUncheckedUpdateWithoutGroupKeySharesInput>
  }

  export type UserCreateNestedOneWithoutMessagesSentInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesReceivedInput = {
    create?: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutMessagesInput = {
    create?: XOR<DepartmentCreateWithoutMessagesInput, DepartmentUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMessagesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type EncryptedAESKeyCreateNestedManyWithoutMessageInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutMessageInput, EncryptedAESKeyUncheckedCreateWithoutMessageInput> | EncryptedAESKeyCreateWithoutMessageInput[] | EncryptedAESKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutMessageInput | EncryptedAESKeyCreateOrConnectWithoutMessageInput[]
    createMany?: EncryptedAESKeyCreateManyMessageInputEnvelope
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
  }

  export type EncryptedAESKeyUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutMessageInput, EncryptedAESKeyUncheckedCreateWithoutMessageInput> | EncryptedAESKeyCreateWithoutMessageInput[] | EncryptedAESKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutMessageInput | EncryptedAESKeyCreateOrConnectWithoutMessageInput[]
    createMany?: EncryptedAESKeyCreateManyMessageInputEnvelope
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMessagesSentNestedInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    upsert?: UserUpsertWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesSentInput, UserUpdateWithoutMessagesSentInput>, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateOneWithoutMessagesReceivedNestedInput = {
    create?: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReceivedInput
    upsert?: UserUpsertWithoutMessagesReceivedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesReceivedInput, UserUpdateWithoutMessagesReceivedInput>, UserUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type DepartmentUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<DepartmentCreateWithoutMessagesInput, DepartmentUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMessagesInput
    upsert?: DepartmentUpsertWithoutMessagesInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutMessagesInput, DepartmentUpdateWithoutMessagesInput>, DepartmentUncheckedUpdateWithoutMessagesInput>
  }

  export type EncryptedAESKeyUpdateManyWithoutMessageNestedInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutMessageInput, EncryptedAESKeyUncheckedCreateWithoutMessageInput> | EncryptedAESKeyCreateWithoutMessageInput[] | EncryptedAESKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutMessageInput | EncryptedAESKeyCreateOrConnectWithoutMessageInput[]
    upsert?: EncryptedAESKeyUpsertWithWhereUniqueWithoutMessageInput | EncryptedAESKeyUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: EncryptedAESKeyCreateManyMessageInputEnvelope
    set?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    disconnect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    delete?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    update?: EncryptedAESKeyUpdateWithWhereUniqueWithoutMessageInput | EncryptedAESKeyUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: EncryptedAESKeyUpdateManyWithWhereWithoutMessageInput | EncryptedAESKeyUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: EncryptedAESKeyScalarWhereInput | EncryptedAESKeyScalarWhereInput[]
  }

  export type EncryptedAESKeyUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<EncryptedAESKeyCreateWithoutMessageInput, EncryptedAESKeyUncheckedCreateWithoutMessageInput> | EncryptedAESKeyCreateWithoutMessageInput[] | EncryptedAESKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: EncryptedAESKeyCreateOrConnectWithoutMessageInput | EncryptedAESKeyCreateOrConnectWithoutMessageInput[]
    upsert?: EncryptedAESKeyUpsertWithWhereUniqueWithoutMessageInput | EncryptedAESKeyUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: EncryptedAESKeyCreateManyMessageInputEnvelope
    set?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    disconnect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    delete?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    connect?: EncryptedAESKeyWhereUniqueInput | EncryptedAESKeyWhereUniqueInput[]
    update?: EncryptedAESKeyUpdateWithWhereUniqueWithoutMessageInput | EncryptedAESKeyUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: EncryptedAESKeyUpdateManyWithWhereWithoutMessageInput | EncryptedAESKeyUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: EncryptedAESKeyScalarWhereInput | EncryptedAESKeyScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutEncryptedAESKeysInput = {
    create?: XOR<MessageCreateWithoutEncryptedAESKeysInput, MessageUncheckedCreateWithoutEncryptedAESKeysInput>
    connectOrCreate?: MessageCreateOrConnectWithoutEncryptedAESKeysInput
    connect?: MessageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEncryptedAESKeysInput = {
    create?: XOR<UserCreateWithoutEncryptedAESKeysInput, UserUncheckedCreateWithoutEncryptedAESKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutEncryptedAESKeysInput
    connect?: UserWhereUniqueInput
  }

  export type MessageUpdateOneRequiredWithoutEncryptedAESKeysNestedInput = {
    create?: XOR<MessageCreateWithoutEncryptedAESKeysInput, MessageUncheckedCreateWithoutEncryptedAESKeysInput>
    connectOrCreate?: MessageCreateOrConnectWithoutEncryptedAESKeysInput
    upsert?: MessageUpsertWithoutEncryptedAESKeysInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutEncryptedAESKeysInput, MessageUpdateWithoutEncryptedAESKeysInput>, MessageUncheckedUpdateWithoutEncryptedAESKeysInput>
  }

  export type UserUpdateOneRequiredWithoutEncryptedAESKeysNestedInput = {
    create?: XOR<UserCreateWithoutEncryptedAESKeysInput, UserUncheckedCreateWithoutEncryptedAESKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutEncryptedAESKeysInput
    upsert?: UserUpsertWithoutEncryptedAESKeysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEncryptedAESKeysInput, UserUpdateWithoutEncryptedAESKeysInput>, UserUncheckedUpdateWithoutEncryptedAESKeysInput>
  }

  export type UserCreateNestedOneWithoutLoginLogsInput = {
    create?: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumActionFieldUpdateOperationsInput = {
    set?: $Enums.Action
  }

  export type UserUpdateOneRequiredWithoutLoginLogsNestedInput = {
    create?: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginLogsInput
    upsert?: UserUpsertWithoutLoginLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoginLogsInput, UserUpdateWithoutLoginLogsInput>, UserUncheckedUpdateWithoutLoginLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumActionFilter<$PrismaModel = never> = {
    equals?: $Enums.Action | EnumActionFieldRefInput<$PrismaModel>
    in?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActionFilter<$PrismaModel> | $Enums.Action
  }

  export type NestedEnumActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Action | EnumActionFieldRefInput<$PrismaModel>
    in?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Action[] | ListEnumActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActionWithAggregatesFilter<$PrismaModel> | $Enums.Action
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionFilter<$PrismaModel>
    _max?: NestedEnumActionFilter<$PrismaModel>
  }

  export type KeyPairCreateWithoutUserInput = {
    id?: string
    publicKey: string
    encryptedPrivKey: string
  }

  export type KeyPairUncheckedCreateWithoutUserInput = {
    id?: string
    publicKey: string
    encryptedPrivKey: string
  }

  export type KeyPairCreateOrConnectWithoutUserInput = {
    where: KeyPairWhereUniqueInput
    create: XOR<KeyPairCreateWithoutUserInput, KeyPairUncheckedCreateWithoutUserInput>
  }

  export type UserDepartmentCreateWithoutUserInput = {
    id?: string
    department: DepartmentCreateNestedOneWithoutUsersInput
  }

  export type UserDepartmentUncheckedCreateWithoutUserInput = {
    id?: string
    departmentId: string
  }

  export type UserDepartmentCreateOrConnectWithoutUserInput = {
    where: UserDepartmentWhereUniqueInput
    create: XOR<UserDepartmentCreateWithoutUserInput, UserDepartmentUncheckedCreateWithoutUserInput>
  }

  export type UserDepartmentCreateManyUserInputEnvelope = {
    data: UserDepartmentCreateManyUserInput | UserDepartmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GroupKeyShareCreateWithoutUserInput = {
    id?: string
    encryptedKey: string
    department: DepartmentCreateNestedOneWithoutGroupKeySharesInput
  }

  export type GroupKeyShareUncheckedCreateWithoutUserInput = {
    id?: string
    departmentId: string
    encryptedKey: string
  }

  export type GroupKeyShareCreateOrConnectWithoutUserInput = {
    where: GroupKeyShareWhereUniqueInput
    create: XOR<GroupKeyShareCreateWithoutUserInput, GroupKeyShareUncheckedCreateWithoutUserInput>
  }

  export type GroupKeyShareCreateManyUserInputEnvelope = {
    data: GroupKeyShareCreateManyUserInput | GroupKeyShareCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    receiver?: UserCreateNestedOneWithoutMessagesReceivedInput
    department?: DepartmentCreateNestedOneWithoutMessagesInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    receiverId?: string | null
    departmentId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverInput = {
    id?: string
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesSentInput
    department?: DepartmentCreateNestedOneWithoutMessagesInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReceiverInput = {
    id?: string
    senderId: string
    departmentId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageCreateManyReceiverInputEnvelope = {
    data: MessageCreateManyReceiverInput | MessageCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type LoginLogCreateWithoutUserInput = {
    id?: string
    action: $Enums.Action
    timestamp?: Date | string
  }

  export type LoginLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: $Enums.Action
    timestamp?: Date | string
  }

  export type LoginLogCreateOrConnectWithoutUserInput = {
    where: LoginLogWhereUniqueInput
    create: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput>
  }

  export type LoginLogCreateManyUserInputEnvelope = {
    data: LoginLogCreateManyUserInput | LoginLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutLeaderInput = {
    id?: string
    name: string
    createdBy?: UserCreateNestedOneWithoutCreatedDepartmentsInput
    users?: UserDepartmentCreateNestedManyWithoutDepartmentInput
    messages?: MessageCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutLeaderInput = {
    id?: string
    name: string
    createdById?: string | null
    users?: UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInput
    messages?: MessageUncheckedCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutLeaderInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutLeaderInput, DepartmentUncheckedCreateWithoutLeaderInput>
  }

  export type DepartmentCreateManyLeaderInputEnvelope = {
    data: DepartmentCreateManyLeaderInput | DepartmentCreateManyLeaderInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutCreatedByInput = {
    id?: string
    name: string
    leader?: UserCreateNestedOneWithoutLedDepartmentsInput
    users?: UserDepartmentCreateNestedManyWithoutDepartmentInput
    messages?: MessageCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    leaderId?: string | null
    users?: UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInput
    messages?: MessageUncheckedCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCreatedByInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput>
  }

  export type DepartmentCreateManyCreatedByInputEnvelope = {
    data: DepartmentCreateManyCreatedByInput | DepartmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type EncryptedAESKeyCreateWithoutUserInput = {
    id?: string
    aesKey: string
    message: MessageCreateNestedOneWithoutEncryptedAESKeysInput
  }

  export type EncryptedAESKeyUncheckedCreateWithoutUserInput = {
    id?: string
    messageId: string
    aesKey: string
  }

  export type EncryptedAESKeyCreateOrConnectWithoutUserInput = {
    where: EncryptedAESKeyWhereUniqueInput
    create: XOR<EncryptedAESKeyCreateWithoutUserInput, EncryptedAESKeyUncheckedCreateWithoutUserInput>
  }

  export type EncryptedAESKeyCreateManyUserInputEnvelope = {
    data: EncryptedAESKeyCreateManyUserInput | EncryptedAESKeyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type KeyPairUpsertWithoutUserInput = {
    update: XOR<KeyPairUpdateWithoutUserInput, KeyPairUncheckedUpdateWithoutUserInput>
    create: XOR<KeyPairCreateWithoutUserInput, KeyPairUncheckedCreateWithoutUserInput>
    where?: KeyPairWhereInput
  }

  export type KeyPairUpdateToOneWithWhereWithoutUserInput = {
    where?: KeyPairWhereInput
    data: XOR<KeyPairUpdateWithoutUserInput, KeyPairUncheckedUpdateWithoutUserInput>
  }

  export type KeyPairUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    encryptedPrivKey?: StringFieldUpdateOperationsInput | string
  }

  export type KeyPairUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    encryptedPrivKey?: StringFieldUpdateOperationsInput | string
  }

  export type UserDepartmentUpsertWithWhereUniqueWithoutUserInput = {
    where: UserDepartmentWhereUniqueInput
    update: XOR<UserDepartmentUpdateWithoutUserInput, UserDepartmentUncheckedUpdateWithoutUserInput>
    create: XOR<UserDepartmentCreateWithoutUserInput, UserDepartmentUncheckedCreateWithoutUserInput>
  }

  export type UserDepartmentUpdateWithWhereUniqueWithoutUserInput = {
    where: UserDepartmentWhereUniqueInput
    data: XOR<UserDepartmentUpdateWithoutUserInput, UserDepartmentUncheckedUpdateWithoutUserInput>
  }

  export type UserDepartmentUpdateManyWithWhereWithoutUserInput = {
    where: UserDepartmentScalarWhereInput
    data: XOR<UserDepartmentUpdateManyMutationInput, UserDepartmentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserDepartmentScalarWhereInput = {
    AND?: UserDepartmentScalarWhereInput | UserDepartmentScalarWhereInput[]
    OR?: UserDepartmentScalarWhereInput[]
    NOT?: UserDepartmentScalarWhereInput | UserDepartmentScalarWhereInput[]
    id?: StringFilter<"UserDepartment"> | string
    userId?: StringFilter<"UserDepartment"> | string
    departmentId?: StringFilter<"UserDepartment"> | string
  }

  export type GroupKeyShareUpsertWithWhereUniqueWithoutUserInput = {
    where: GroupKeyShareWhereUniqueInput
    update: XOR<GroupKeyShareUpdateWithoutUserInput, GroupKeyShareUncheckedUpdateWithoutUserInput>
    create: XOR<GroupKeyShareCreateWithoutUserInput, GroupKeyShareUncheckedCreateWithoutUserInput>
  }

  export type GroupKeyShareUpdateWithWhereUniqueWithoutUserInput = {
    where: GroupKeyShareWhereUniqueInput
    data: XOR<GroupKeyShareUpdateWithoutUserInput, GroupKeyShareUncheckedUpdateWithoutUserInput>
  }

  export type GroupKeyShareUpdateManyWithWhereWithoutUserInput = {
    where: GroupKeyShareScalarWhereInput
    data: XOR<GroupKeyShareUpdateManyMutationInput, GroupKeyShareUncheckedUpdateManyWithoutUserInput>
  }

  export type GroupKeyShareScalarWhereInput = {
    AND?: GroupKeyShareScalarWhereInput | GroupKeyShareScalarWhereInput[]
    OR?: GroupKeyShareScalarWhereInput[]
    NOT?: GroupKeyShareScalarWhereInput | GroupKeyShareScalarWhereInput[]
    id?: StringFilter<"GroupKeyShare"> | string
    userId?: StringFilter<"GroupKeyShare"> | string
    departmentId?: StringFilter<"GroupKeyShare"> | string
    encryptedKey?: StringFilter<"GroupKeyShare"> | string
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringNullableFilter<"Message"> | string | null
    departmentId?: StringNullableFilter<"Message"> | string | null
    encryptedContent?: StringFilter<"Message"> | string
    isBroadcast?: BoolFilter<"Message"> | boolean
    fileUrl?: StringNullableFilter<"Message"> | string | null
    sentAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverInput>
  }

  export type LoginLogUpsertWithWhereUniqueWithoutUserInput = {
    where: LoginLogWhereUniqueInput
    update: XOR<LoginLogUpdateWithoutUserInput, LoginLogUncheckedUpdateWithoutUserInput>
    create: XOR<LoginLogCreateWithoutUserInput, LoginLogUncheckedCreateWithoutUserInput>
  }

  export type LoginLogUpdateWithWhereUniqueWithoutUserInput = {
    where: LoginLogWhereUniqueInput
    data: XOR<LoginLogUpdateWithoutUserInput, LoginLogUncheckedUpdateWithoutUserInput>
  }

  export type LoginLogUpdateManyWithWhereWithoutUserInput = {
    where: LoginLogScalarWhereInput
    data: XOR<LoginLogUpdateManyMutationInput, LoginLogUncheckedUpdateManyWithoutUserInput>
  }

  export type LoginLogScalarWhereInput = {
    AND?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
    OR?: LoginLogScalarWhereInput[]
    NOT?: LoginLogScalarWhereInput | LoginLogScalarWhereInput[]
    id?: StringFilter<"LoginLog"> | string
    userId?: StringFilter<"LoginLog"> | string
    action?: EnumActionFilter<"LoginLog"> | $Enums.Action
    timestamp?: DateTimeFilter<"LoginLog"> | Date | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutLeaderInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutLeaderInput, DepartmentUncheckedUpdateWithoutLeaderInput>
    create: XOR<DepartmentCreateWithoutLeaderInput, DepartmentUncheckedCreateWithoutLeaderInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutLeaderInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutLeaderInput, DepartmentUncheckedUpdateWithoutLeaderInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutLeaderInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutLeaderInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    leaderId?: StringNullableFilter<"Department"> | string | null
    createdById?: StringNullableFilter<"Department"> | string | null
  }

  export type DepartmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutCreatedByInput, DepartmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutCreatedByInput, DepartmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type EncryptedAESKeyUpsertWithWhereUniqueWithoutUserInput = {
    where: EncryptedAESKeyWhereUniqueInput
    update: XOR<EncryptedAESKeyUpdateWithoutUserInput, EncryptedAESKeyUncheckedUpdateWithoutUserInput>
    create: XOR<EncryptedAESKeyCreateWithoutUserInput, EncryptedAESKeyUncheckedCreateWithoutUserInput>
  }

  export type EncryptedAESKeyUpdateWithWhereUniqueWithoutUserInput = {
    where: EncryptedAESKeyWhereUniqueInput
    data: XOR<EncryptedAESKeyUpdateWithoutUserInput, EncryptedAESKeyUncheckedUpdateWithoutUserInput>
  }

  export type EncryptedAESKeyUpdateManyWithWhereWithoutUserInput = {
    where: EncryptedAESKeyScalarWhereInput
    data: XOR<EncryptedAESKeyUpdateManyMutationInput, EncryptedAESKeyUncheckedUpdateManyWithoutUserInput>
  }

  export type EncryptedAESKeyScalarWhereInput = {
    AND?: EncryptedAESKeyScalarWhereInput | EncryptedAESKeyScalarWhereInput[]
    OR?: EncryptedAESKeyScalarWhereInput[]
    NOT?: EncryptedAESKeyScalarWhereInput | EncryptedAESKeyScalarWhereInput[]
    id?: StringFilter<"EncryptedAESKey"> | string
    messageId?: StringFilter<"EncryptedAESKey"> | string
    userId?: StringFilter<"EncryptedAESKey"> | string
    aesKey?: StringFilter<"EncryptedAESKey"> | string
  }

  export type UserCreateWithoutKeysInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKeysInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
  }

  export type UserUpsertWithoutKeysInput = {
    update: XOR<UserUpdateWithoutKeysInput, UserUncheckedUpdateWithoutKeysInput>
    create: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKeysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKeysInput, UserUncheckedUpdateWithoutKeysInput>
  }

  export type UserUpdateWithoutKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutLedDepartmentsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLedDepartmentsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLedDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLedDepartmentsInput, UserUncheckedCreateWithoutLedDepartmentsInput>
  }

  export type UserCreateWithoutCreatedDepartmentsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedDepartmentsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedDepartmentsInput, UserUncheckedCreateWithoutCreatedDepartmentsInput>
  }

  export type UserDepartmentCreateWithoutDepartmentInput = {
    id?: string
    user: UserCreateNestedOneWithoutDepartmentsInput
  }

  export type UserDepartmentUncheckedCreateWithoutDepartmentInput = {
    id?: string
    userId: string
  }

  export type UserDepartmentCreateOrConnectWithoutDepartmentInput = {
    where: UserDepartmentWhereUniqueInput
    create: XOR<UserDepartmentCreateWithoutDepartmentInput, UserDepartmentUncheckedCreateWithoutDepartmentInput>
  }

  export type UserDepartmentCreateManyDepartmentInputEnvelope = {
    data: UserDepartmentCreateManyDepartmentInput | UserDepartmentCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutDepartmentInput = {
    id?: string
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesSentInput
    receiver?: UserCreateNestedOneWithoutMessagesReceivedInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutDepartmentInput = {
    id?: string
    senderId: string
    receiverId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutDepartmentInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutDepartmentInput, MessageUncheckedCreateWithoutDepartmentInput>
  }

  export type MessageCreateManyDepartmentInputEnvelope = {
    data: MessageCreateManyDepartmentInput | MessageCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type GroupKeyShareCreateWithoutDepartmentInput = {
    id?: string
    encryptedKey: string
    user: UserCreateNestedOneWithoutGroupKeySharesInput
  }

  export type GroupKeyShareUncheckedCreateWithoutDepartmentInput = {
    id?: string
    userId: string
    encryptedKey: string
  }

  export type GroupKeyShareCreateOrConnectWithoutDepartmentInput = {
    where: GroupKeyShareWhereUniqueInput
    create: XOR<GroupKeyShareCreateWithoutDepartmentInput, GroupKeyShareUncheckedCreateWithoutDepartmentInput>
  }

  export type GroupKeyShareCreateManyDepartmentInputEnvelope = {
    data: GroupKeyShareCreateManyDepartmentInput | GroupKeyShareCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutLedDepartmentsInput = {
    update: XOR<UserUpdateWithoutLedDepartmentsInput, UserUncheckedUpdateWithoutLedDepartmentsInput>
    create: XOR<UserCreateWithoutLedDepartmentsInput, UserUncheckedCreateWithoutLedDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLedDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLedDepartmentsInput, UserUncheckedUpdateWithoutLedDepartmentsInput>
  }

  export type UserUpdateWithoutLedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCreatedDepartmentsInput = {
    update: XOR<UserUpdateWithoutCreatedDepartmentsInput, UserUncheckedUpdateWithoutCreatedDepartmentsInput>
    create: XOR<UserCreateWithoutCreatedDepartmentsInput, UserUncheckedCreateWithoutCreatedDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedDepartmentsInput, UserUncheckedUpdateWithoutCreatedDepartmentsInput>
  }

  export type UserUpdateWithoutCreatedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserDepartmentWhereUniqueInput
    update: XOR<UserDepartmentUpdateWithoutDepartmentInput, UserDepartmentUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserDepartmentCreateWithoutDepartmentInput, UserDepartmentUncheckedCreateWithoutDepartmentInput>
  }

  export type UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserDepartmentWhereUniqueInput
    data: XOR<UserDepartmentUpdateWithoutDepartmentInput, UserDepartmentUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserDepartmentUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserDepartmentScalarWhereInput
    data: XOR<UserDepartmentUpdateManyMutationInput, UserDepartmentUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutDepartmentInput, MessageUncheckedUpdateWithoutDepartmentInput>
    create: XOR<MessageCreateWithoutDepartmentInput, MessageUncheckedCreateWithoutDepartmentInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutDepartmentInput, MessageUncheckedUpdateWithoutDepartmentInput>
  }

  export type MessageUpdateManyWithWhereWithoutDepartmentInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type GroupKeyShareUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: GroupKeyShareWhereUniqueInput
    update: XOR<GroupKeyShareUpdateWithoutDepartmentInput, GroupKeyShareUncheckedUpdateWithoutDepartmentInput>
    create: XOR<GroupKeyShareCreateWithoutDepartmentInput, GroupKeyShareUncheckedCreateWithoutDepartmentInput>
  }

  export type GroupKeyShareUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: GroupKeyShareWhereUniqueInput
    data: XOR<GroupKeyShareUpdateWithoutDepartmentInput, GroupKeyShareUncheckedUpdateWithoutDepartmentInput>
  }

  export type GroupKeyShareUpdateManyWithWhereWithoutDepartmentInput = {
    where: GroupKeyShareScalarWhereInput
    data: XOR<GroupKeyShareUpdateManyMutationInput, GroupKeyShareUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutDepartmentsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
  }

  export type DepartmentCreateWithoutUsersInput = {
    id?: string
    name: string
    leader?: UserCreateNestedOneWithoutLedDepartmentsInput
    createdBy?: UserCreateNestedOneWithoutCreatedDepartmentsInput
    messages?: MessageCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdById?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutDepartmentsInput = {
    update: XOR<UserUpdateWithoutDepartmentsInput, UserUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<UserCreateWithoutDepartmentsInput, UserUncheckedCreateWithoutDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDepartmentsInput, UserUncheckedUpdateWithoutDepartmentsInput>
  }

  export type UserUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leader?: UserUpdateOneWithoutLedDepartmentsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedDepartmentsNestedInput
    messages?: MessageUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserCreateWithoutGroupKeySharesInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGroupKeySharesInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGroupKeySharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupKeySharesInput, UserUncheckedCreateWithoutGroupKeySharesInput>
  }

  export type DepartmentCreateWithoutGroupKeySharesInput = {
    id?: string
    name: string
    leader?: UserCreateNestedOneWithoutLedDepartmentsInput
    createdBy?: UserCreateNestedOneWithoutCreatedDepartmentsInput
    users?: UserDepartmentCreateNestedManyWithoutDepartmentInput
    messages?: MessageCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutGroupKeySharesInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdById?: string | null
    users?: UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInput
    messages?: MessageUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutGroupKeySharesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutGroupKeySharesInput, DepartmentUncheckedCreateWithoutGroupKeySharesInput>
  }

  export type UserUpsertWithoutGroupKeySharesInput = {
    update: XOR<UserUpdateWithoutGroupKeySharesInput, UserUncheckedUpdateWithoutGroupKeySharesInput>
    create: XOR<UserCreateWithoutGroupKeySharesInput, UserUncheckedCreateWithoutGroupKeySharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGroupKeySharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGroupKeySharesInput, UserUncheckedUpdateWithoutGroupKeySharesInput>
  }

  export type UserUpdateWithoutGroupKeySharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupKeySharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutGroupKeySharesInput = {
    update: XOR<DepartmentUpdateWithoutGroupKeySharesInput, DepartmentUncheckedUpdateWithoutGroupKeySharesInput>
    create: XOR<DepartmentCreateWithoutGroupKeySharesInput, DepartmentUncheckedCreateWithoutGroupKeySharesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutGroupKeySharesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutGroupKeySharesInput, DepartmentUncheckedUpdateWithoutGroupKeySharesInput>
  }

  export type DepartmentUpdateWithoutGroupKeySharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leader?: UserUpdateOneWithoutLedDepartmentsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedDepartmentsNestedInput
    users?: UserDepartmentUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutGroupKeySharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserCreateWithoutMessagesSentInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesSentInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
  }

  export type UserCreateWithoutMessagesReceivedInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesReceivedInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
  }

  export type DepartmentCreateWithoutMessagesInput = {
    id?: string
    name: string
    leader?: UserCreateNestedOneWithoutLedDepartmentsInput
    createdBy?: UserCreateNestedOneWithoutCreatedDepartmentsInput
    users?: UserDepartmentCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutMessagesInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdById?: string | null
    users?: UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutMessagesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutMessagesInput, DepartmentUncheckedCreateWithoutMessagesInput>
  }

  export type EncryptedAESKeyCreateWithoutMessageInput = {
    id?: string
    aesKey: string
    user: UserCreateNestedOneWithoutEncryptedAESKeysInput
  }

  export type EncryptedAESKeyUncheckedCreateWithoutMessageInput = {
    id?: string
    userId: string
    aesKey: string
  }

  export type EncryptedAESKeyCreateOrConnectWithoutMessageInput = {
    where: EncryptedAESKeyWhereUniqueInput
    create: XOR<EncryptedAESKeyCreateWithoutMessageInput, EncryptedAESKeyUncheckedCreateWithoutMessageInput>
  }

  export type EncryptedAESKeyCreateManyMessageInputEnvelope = {
    data: EncryptedAESKeyCreateManyMessageInput | EncryptedAESKeyCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMessagesSentInput = {
    update: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutMessagesReceivedInput = {
    update: XOR<UserUpdateWithoutMessagesReceivedInput, UserUncheckedUpdateWithoutMessagesReceivedInput>
    create: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesReceivedInput, UserUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type UserUpdateWithoutMessagesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutMessagesInput = {
    update: XOR<DepartmentUpdateWithoutMessagesInput, DepartmentUncheckedUpdateWithoutMessagesInput>
    create: XOR<DepartmentCreateWithoutMessagesInput, DepartmentUncheckedCreateWithoutMessagesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutMessagesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutMessagesInput, DepartmentUncheckedUpdateWithoutMessagesInput>
  }

  export type DepartmentUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leader?: UserUpdateOneWithoutLedDepartmentsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedDepartmentsNestedInput
    users?: UserDepartmentUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type EncryptedAESKeyUpsertWithWhereUniqueWithoutMessageInput = {
    where: EncryptedAESKeyWhereUniqueInput
    update: XOR<EncryptedAESKeyUpdateWithoutMessageInput, EncryptedAESKeyUncheckedUpdateWithoutMessageInput>
    create: XOR<EncryptedAESKeyCreateWithoutMessageInput, EncryptedAESKeyUncheckedCreateWithoutMessageInput>
  }

  export type EncryptedAESKeyUpdateWithWhereUniqueWithoutMessageInput = {
    where: EncryptedAESKeyWhereUniqueInput
    data: XOR<EncryptedAESKeyUpdateWithoutMessageInput, EncryptedAESKeyUncheckedUpdateWithoutMessageInput>
  }

  export type EncryptedAESKeyUpdateManyWithWhereWithoutMessageInput = {
    where: EncryptedAESKeyScalarWhereInput
    data: XOR<EncryptedAESKeyUpdateManyMutationInput, EncryptedAESKeyUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageCreateWithoutEncryptedAESKeysInput = {
    id?: string
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesSentInput
    receiver?: UserCreateNestedOneWithoutMessagesReceivedInput
    department?: DepartmentCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutEncryptedAESKeysInput = {
    id?: string
    senderId: string
    receiverId?: string | null
    departmentId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutEncryptedAESKeysInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutEncryptedAESKeysInput, MessageUncheckedCreateWithoutEncryptedAESKeysInput>
  }

  export type UserCreateWithoutEncryptedAESKeysInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutEncryptedAESKeysInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    loginLogs?: LoginLogUncheckedCreateNestedManyWithoutUserInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutEncryptedAESKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEncryptedAESKeysInput, UserUncheckedCreateWithoutEncryptedAESKeysInput>
  }

  export type MessageUpsertWithoutEncryptedAESKeysInput = {
    update: XOR<MessageUpdateWithoutEncryptedAESKeysInput, MessageUncheckedUpdateWithoutEncryptedAESKeysInput>
    create: XOR<MessageCreateWithoutEncryptedAESKeysInput, MessageUncheckedCreateWithoutEncryptedAESKeysInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutEncryptedAESKeysInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutEncryptedAESKeysInput, MessageUncheckedUpdateWithoutEncryptedAESKeysInput>
  }

  export type MessageUpdateWithoutEncryptedAESKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
    receiver?: UserUpdateOneWithoutMessagesReceivedNestedInput
    department?: DepartmentUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutEncryptedAESKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutEncryptedAESKeysInput = {
    update: XOR<UserUpdateWithoutEncryptedAESKeysInput, UserUncheckedUpdateWithoutEncryptedAESKeysInput>
    create: XOR<UserCreateWithoutEncryptedAESKeysInput, UserUncheckedCreateWithoutEncryptedAESKeysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEncryptedAESKeysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEncryptedAESKeysInput, UserUncheckedUpdateWithoutEncryptedAESKeysInput>
  }

  export type UserUpdateWithoutEncryptedAESKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutEncryptedAESKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    loginLogs?: LoginLogUncheckedUpdateManyWithoutUserNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutLoginLogsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairCreateNestedOneWithoutUserInput
    departments?: UserDepartmentCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    ledDepartments?: DepartmentCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLoginLogsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    isApproved?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    keys?: KeyPairUncheckedCreateNestedOneWithoutUserInput
    departments?: UserDepartmentUncheckedCreateNestedManyWithoutUserInput
    groupKeyShares?: GroupKeyShareUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    ledDepartments?: DepartmentUncheckedCreateNestedManyWithoutLeaderInput
    createdDepartments?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLoginLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
  }

  export type UserUpsertWithoutLoginLogsInput = {
    update: XOR<UserUpdateWithoutLoginLogsInput, UserUncheckedUpdateWithoutLoginLogsInput>
    create: XOR<UserCreateWithoutLoginLogsInput, UserUncheckedCreateWithoutLoginLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoginLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoginLogsInput, UserUncheckedUpdateWithoutLoginLogsInput>
  }

  export type UserUpdateWithoutLoginLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    ledDepartments?: DepartmentUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLoginLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: KeyPairUncheckedUpdateOneWithoutUserNestedInput
    departments?: UserDepartmentUncheckedUpdateManyWithoutUserNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    ledDepartments?: DepartmentUncheckedUpdateManyWithoutLeaderNestedInput
    createdDepartments?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserDepartmentCreateManyUserInput = {
    id?: string
    departmentId: string
  }

  export type GroupKeyShareCreateManyUserInput = {
    id?: string
    departmentId: string
    encryptedKey: string
  }

  export type MessageCreateManySenderInput = {
    id?: string
    receiverId?: string | null
    departmentId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
  }

  export type MessageCreateManyReceiverInput = {
    id?: string
    senderId: string
    departmentId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
  }

  export type LoginLogCreateManyUserInput = {
    id?: string
    action: $Enums.Action
    timestamp?: Date | string
  }

  export type DepartmentCreateManyLeaderInput = {
    id?: string
    name: string
    createdById?: string | null
  }

  export type DepartmentCreateManyCreatedByInput = {
    id?: string
    name: string
    leaderId?: string | null
  }

  export type EncryptedAESKeyCreateManyUserInput = {
    id?: string
    messageId: string
    aesKey: string
  }

  export type UserDepartmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserDepartmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDepartmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type GroupKeyShareUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutGroupKeySharesNestedInput
  }

  export type GroupKeyShareUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type GroupKeyShareUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneWithoutMessagesReceivedNestedInput
    department?: DepartmentUpdateOneWithoutMessagesNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
    department?: DepartmentUpdateOneWithoutMessagesNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionFieldUpdateOperationsInput | $Enums.Action
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionFieldUpdateOperationsInput | $Enums.Action
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionFieldUpdateOperationsInput | $Enums.Action
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutLeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneWithoutCreatedDepartmentsNestedInput
    users?: UserDepartmentUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutLeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUncheckedUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutLeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leader?: UserUpdateOneWithoutLedDepartmentsNestedInput
    users?: UserDepartmentUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInput
    messages?: MessageUncheckedUpdateManyWithoutDepartmentNestedInput
    groupKeyShares?: GroupKeyShareUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EncryptedAESKeyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutEncryptedAESKeysNestedInput
  }

  export type EncryptedAESKeyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
  }

  export type EncryptedAESKeyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
  }

  export type UserDepartmentCreateManyDepartmentInput = {
    id?: string
    userId: string
  }

  export type MessageCreateManyDepartmentInput = {
    id?: string
    senderId: string
    receiverId?: string | null
    encryptedContent: string
    isBroadcast?: boolean
    fileUrl?: string | null
    sentAt?: Date | string
  }

  export type GroupKeyShareCreateManyDepartmentInput = {
    id?: string
    userId: string
    encryptedKey: string
  }

  export type UserDepartmentUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type UserDepartmentUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDepartmentUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
    receiver?: UserUpdateOneWithoutMessagesReceivedNestedInput
    encryptedAESKeys?: EncryptedAESKeyUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encryptedAESKeys?: EncryptedAESKeyUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedContent?: StringFieldUpdateOperationsInput | string
    isBroadcast?: BoolFieldUpdateOperationsInput | boolean
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupKeyShareUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutGroupKeySharesNestedInput
  }

  export type GroupKeyShareUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type GroupKeyShareUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type EncryptedAESKeyCreateManyMessageInput = {
    id?: string
    userId: string
    aesKey: string
  }

  export type EncryptedAESKeyUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEncryptedAESKeysNestedInput
  }

  export type EncryptedAESKeyUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
  }

  export type EncryptedAESKeyUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    aesKey?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}